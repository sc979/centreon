{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/354d1b9c-fbb9-428f-82a6-ab63c385fc47/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "354d1b9c-fbb9-428f-82a6-ab63c385fc47",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 1467465 bytes",
  "modules": [
    "JS files within centreon_develop.zip",
    "PHP files within centreon_develop.zip",
    "Python files within centreon_develop.zip"
  ],
  "modules_count": 3,
  "findings": [
    {
      "title": "!php_standard_ns.preg_replace",
      "issue_id": 1520,
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Directives in Dynamically Evaluated Code (\u0027Eval Injection\u0027)",
      "cwe_id": "95",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.preg_replace() contains untrusted input.  If this input could be modified by an attacker, arbitrary PHP code could be executed on the server. The second argument to preg_replace() contains data from a backend database from the variable this.replaceFilter(). The data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/95.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonldap.class.php",
          "line": 298,
          "function_name": "findUserDn",
          "qualified_function_name": "CentreonLDAP.findUserDn",
          "function_prototype": "findUserDn($)",
          "scope": "CentreonLDAP"
        }
      },
      "flaw_match": {
        "procedure_hash": "1200430193",
        "prototype_hash": "628203092",
        "flaw_hash": "254816032",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1574239409",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1176028798",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1394,
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to passthru() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 713,
          "function_name": "sendTrapCfg",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.sendTrapCfg",
          "function_prototype": "sendTrapCfg($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "4272948150",
        "prototype_hash": "3194459574",
        "flaw_hash": "3878801445",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2787996451",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2970259658",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.exec",
      "issue_id": 1393,
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 714,
          "function_name": "sendTrapCfg",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.sendTrapCfg",
          "function_prototype": "sendTrapCfg($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "4272948150",
        "prototype_hash": "3194459574",
        "flaw_hash": "597303459",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4168280229",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2784224574",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1473,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/src/index.php",
          "line": 402,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2510425979",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1474,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/src/index.php",
          "line": 248,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3753407221",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1504,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetchColumn, PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/main.get.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1877902131",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.exec",
      "issue_id": 1436,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.exec() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to exec() contains data from a backend database from the variable sprintf(). The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/steps/process/createdbuser.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2420894131",
        "prototype_hash": "4146034803",
        "flaw_hash": "4241758113",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1779099828",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "951022713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.exec",
      "issue_id": 1435,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.exec() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to exec() contains data from a backend database from the variable sprintf(). The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/steps/process/createdbuser.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2420894131",
        "prototype_hash": "4146034803",
        "flaw_hash": "2750340688",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1549679908",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2973471758",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1443,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-22.04.0-beta.1.php",
          "line": 499,
          "function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "qualified_function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "function_prototype": "migrateBrokerConfigOutputsToUnifiedSql(CentreonDB $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3565172808",
        "prototype_hash": "1831767904",
        "flaw_hash": "1203012069",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1803745338",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1815383700",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1492,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-22.04.0-beta.1.php",
          "line": 540,
          "function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "qualified_function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "function_prototype": "migrateBrokerConfigOutputsToUnifiedSql(CentreonDB $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3565172808",
        "prototype_hash": "1831767904",
        "flaw_hash": "2062308891",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697522926",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1280818426",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1491,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-22.04.0-beta.1.php",
          "line": 616,
          "function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "qualified_function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "function_prototype": "migrateBrokerConfigOutputsToUnifiedSql(CentreonDB $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3565172808",
        "prototype_hash": "1831767904",
        "flaw_hash": "1475355663",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3514142960",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2999320609",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1505,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetchAll, PDOStatement.fetch, and PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-20.10.6.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1907274939",
        "prototype_hash": "4146034803",
        "flaw_hash": "1956693056",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3347809127",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2807219460",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1485,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-18.10.0.post.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2295020697",
        "prototype_hash": "4146034803",
        "flaw_hash": "3317837724",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1964362962",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2115484440",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1261,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 46,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1313,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "3383000465",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1819133002",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "324478671",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1380,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "3383000465",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1819133002",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "324478671",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1369,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 91,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1072,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "3383000465",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1819133002",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "324478671",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1157,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1192,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1115,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1227,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1334,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1289,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1091,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 88,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1134,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 94,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "2029244291",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1883287235",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2359120406",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1272,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "2029244291",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1883287235",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2359120406",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1296,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 102,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "2029244291",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1883287235",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2359120406",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1049,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "3015655270",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1263480256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3711390252",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1204,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 124,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "3015655270",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1263480256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3711390252",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1238,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "3015655270",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1263480256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3711390252",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1499,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/listcomponenttemplates.php",
          "line": 125,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2004151659",
        "prototype_hash": "4146034803",
        "flaw_hash": "731288724",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1197,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1121,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2722767624",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1563215498",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1846556547",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1027,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2329232156",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2876950336",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1481921804",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1080,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2329232156",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2876950336",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1481921804",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1161,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2329232156",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2876950336",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1481921804",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1438,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable rq. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/db-func.php",
          "line": 471,
          "function_name": "getServicesLogs",
          "qualified_function_name": "getServicesLogs",
          "function_prototype": "getServicesLogs(array $, DateTime $, $, array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3365844872",
        "prototype_hash": "3960532224",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1099,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 70,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1057,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "297050210",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "483889186",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4119204812",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1142,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 79,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "297050210",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "483889186",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4119204812",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1177,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "297050210",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "483889186",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4119204812",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1247,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "1788203024",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2655435579",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "253608472",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1324,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "1788203024",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2655435579",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "253608472",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1212,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "3768759649",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2552654460",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2752543838",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1347,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "1820191638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "879973344",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1902017458",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1301,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "3768759649",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2552654460",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2752543838",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1038,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/formdirectory.php",
          "line": 222,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1477024613",
        "prototype_hash": "4146034803",
        "flaw_hash": "3768759649",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2552654460",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2752543838",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1100,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 45,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1058,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1509882437",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1167064244",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1082146312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1325,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 91,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1509882437",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1167064244",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1082146312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1388,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 1,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1362,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1509882437",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1167064244",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1082146312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1178,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 2,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1248,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 3,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1143,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 125,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 4,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1302,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 5,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1384,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 6,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1376,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 161,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 7,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1213,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 173,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 8,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1279,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 176,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 9,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1495,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/formmenusaccess.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380541713",
        "prototype_hash": "4146034803",
        "flaw_hash": "1626594791",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2679133537",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "126249321",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1506,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/formmenusaccess.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380541713",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1510,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/formmenusaccess.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380541713",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1320,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1206,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "4083388359",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1241513421",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1415824929",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1093,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1172,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1240,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1136,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1274,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 140,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1342,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1297,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 153,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1088,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/formgroupconfig.php",
          "line": 426,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2207605938",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1482,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicesummarybysgxml.php",
          "line": 169,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4263485434",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1488,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query2. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicesummarybysgxml.php",
          "line": 265,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4263485434",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1480,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicegridbysgxml.php",
          "line": 171,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4030666685",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1487,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query2. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicegridbysgxml.php",
          "line": 248,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4030666685",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1479,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/serviceshostgroups/xml/servicegridbyhgxml.php",
          "line": 164,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2890243659",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1009,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/serviceshostgroups/servicegridbyhg.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3548224639",
        "prototype_hash": "4146034803",
        "flaw_hash": "4176219578",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3955469432",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3913609784",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1489,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable request. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicexml.php",
          "line": 275,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2388478602",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1483,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicesummaryxml.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "375453905",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1481,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicegridxml.php",
          "line": 145,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3562501299",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1007,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/service.php",
          "line": 253,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1301996050",
        "prototype_hash": "4146034803",
        "flaw_hash": "2744433302",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2966687061",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4120967819",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1281,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 136,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "3280508398",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3100120682",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "937240035",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1215,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 154,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "497126191",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3803741692",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "168658864",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1060,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "3877015040",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2038245433",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2635944",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1180,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "87104316",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3619732386",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2050005338",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1348,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "1440454828",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "939287885",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2906801778",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1327,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415298524",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "719513354",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3486802566",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1250,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 180,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "2929247442",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4164830473",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "558587805",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1364,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 183,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "3280508398",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3100120682",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "937240035",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1472,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/hosts/xml/hostxml.php",
          "line": 252,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "202171855",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1471,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/hostgroups/xml/hostgroupxml.php",
          "line": 140,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1339407050",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1154,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/sethistory.php",
          "line": 41,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "292510545",
        "prototype_hash": "4146034803",
        "flaw_hash": "4025491726",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "731452013",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "336970138",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1190,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/sethistory.php",
          "line": 42,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "292510545",
        "prototype_hash": "4146034803",
        "flaw_hash": "3670718183",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1047889544",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1862534802",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1224,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/sethistory.php",
          "line": 43,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "292510545",
        "prototype_hash": "4146034803",
        "flaw_hash": "3139024779",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1216215499",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1091010029",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1039,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/formdowntime.php",
          "line": 441,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1054529487",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1341,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "1626444509",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2783805875",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "110111320",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1373,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 81,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "3771219509",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2022402327",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "666472615",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1126,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "3771219509",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2022402327",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "666472615",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1201,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "3771219509",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2022402327",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "666472615",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1165,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1270,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1294,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 117,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1235,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1319,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1085,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1383,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1502,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 142,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "1518387740",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1812648672",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2473418574",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1508,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 175,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1507,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/hostdetails.php",
          "line": 142,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "966351563",
        "prototype_hash": "4146034803",
        "flaw_hash": "2186453075",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "547508691",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2118870675",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1086,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "2991191105",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2367873792",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2690228968",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1031,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 62,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "2812361470",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2329746379",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1154535455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1166,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1236,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1230,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 63,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "19684695",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3250703234",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "293941771",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1336,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1079,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 69,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "3791563778",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2506811073",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4120798394",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1026,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "906361703",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2436346519",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4195164924",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1196,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1265,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1120,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1160,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "19684695",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3250703234",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "293941771",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1264,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "1275858774",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4205478656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3093278809",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1025,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "1275858774",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4205478656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3093278809",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1119,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "1275858774",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4205478656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3093278809",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1018,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/addcomment.php",
          "line": 179,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2478131083",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1074,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/addcomment.php",
          "line": 207,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2478131083",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1477,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable sql. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/triggers/loadservicefromhost.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3818226185",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1498,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/header/htmlheader.php",
          "line": 267,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3771810841",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1182,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1283,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1306,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "148557191",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "259657077",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3490139103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1063,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1147,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1218,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 151,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1105,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1509,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/popup/popup.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1236420196",
        "prototype_hash": "4146034803",
        "flaw_hash": "731288724",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1089,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/formservers.php",
          "line": 444,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "43539310",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1062,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 52,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1252,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1146,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "1723854054",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2228454518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1819943010",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1350,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 129,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "1723854054",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2228454518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1819943010",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1366,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "1723854054",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2228454518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1819943010",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1104,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1282,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1305,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 183,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1217,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 198,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1329,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 201,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1260,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1897253059",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "565741390",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1956690104",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1312,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1897253059",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "565741390",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1956690104",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1071,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 88,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1333,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1897253059",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "565741390",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1956690104",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1156,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1191,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1114,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1226,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1047,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/formtraps.php",
          "line": 446,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4205090953",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1239,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1135,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 67,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "805132929",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "119802506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "971392603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1205,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 70,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "805132929",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "119802506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "971392603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1273,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 73,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "805132929",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "119802506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "971392603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1050,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "3702538773",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3147986951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1643282742",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1092,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "3702538773",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3147986951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1643282742",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1171,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "3702538773",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3147986951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1643282742",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1070,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 45,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1259,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "1012574587",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "670384947",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1422937529",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1155,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "1937402683",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3639188258",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4207878402",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1113,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 88,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1225,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1288,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1046,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/formtimeperiod.php",
          "line": 301,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "845715936",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1111,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 55,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1257,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "662435052",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1911825179",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "158535399",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1188,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 99,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "52537051",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3334477969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3267066144",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1222,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "52537051",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3334477969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3267066144",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1068,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "52537051",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3334477969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3267066144",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1286,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1256,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "1880478376",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2999664498",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4109366082",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1110,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1187,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1221,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1152,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1310,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 133,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1476,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/listservicegroup.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2697657033",
        "prototype_hash": "4146034803",
        "flaw_hash": "3194648131",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1645883928",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3864586907",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1486,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/listservicegroup.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2697657033",
        "prototype_hash": "4146034803",
        "flaw_hash": "635970932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2518027787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2535566626",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1045,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/formservicegroup.php",
          "line": 236,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "513235245",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1258,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "113651201",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1352939829",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "922584964",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1332,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 105,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1153,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1189,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 125,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1069,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1223,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 145,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1311,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 155,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1287,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 158,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1132,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/formservicetemplatemodel.php",
          "line": 1051,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1127471626",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1151,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 55,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1067,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "2564343283",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1743111405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "403653409",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1109,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "3477343398",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "432793790",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3459299608",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1186,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "3477343398",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "432793790",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3459299608",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1220,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "3477343398",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "432793790",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3459299608",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1150,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 45,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1066,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "2467764723",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2606957825",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "194259866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1185,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1285,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1309,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1255,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 117,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1331,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1108,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 140,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1353,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 143,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1044,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/formservicecategories.php",
          "line": 249,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4253503233",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1368,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1352,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "4033060633",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2823675762",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "856993368",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1330,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 1,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1387,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 128,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 2,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1107,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 3,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1379,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 148,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 4,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1184,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 158,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 5,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1308,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 6,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1254,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 178,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 7,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1065,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 188,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 8,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1149,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 191,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 9,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1253,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1219,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "4033060633",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2823675762",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "856993368",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1183,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1307,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1367,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1284,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1064,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1148,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 187,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1106,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 197,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1351,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 200,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 8,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1475,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/listservicebyhostgroup.php",
          "line": 240,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2525388630",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1497,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "2482568152",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3567500176",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3056884531",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1131,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1197,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "3094714589",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2566752999",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "5921533",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1090,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1201,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "1440985389",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1135755930",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2017436371",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1237,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1203,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1169,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1205,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "1440985389",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1135755930",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2017436371",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1158,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 51,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1116,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 81,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "801336567",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3058757561",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "223069611",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1193,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 94,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "661752356",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2136336933",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2257869613",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1021,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 104,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "661752356",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2136336933",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2257869613",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1076,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "661752356",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2136336933",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2257869613",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1102,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metric.php",
          "line": 202,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3582294297",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1179,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1059,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "1004567135",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1113711270",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "275733393",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1144,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1326,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1377,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 133,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1303,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1101,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1249,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 152,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3799628418",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1931011625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1817602659",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1389,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 155,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3799628418",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1931011625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1817602659",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1280,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1363,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 175,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1391,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 178,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3799628418",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1931011625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1817602659",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1214,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 188,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1385,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 191,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1496,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/formmetaservice.php",
          "line": 73,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4135239758",
        "prototype_hash": "4146034803",
        "flaw_hash": "3958287864",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "588337286",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1617033469",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1129,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/formmetaservice.php",
          "line": 346,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4135239758",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1098,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1245,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "638734605",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "984828242",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "688857279",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1055,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "1651070473",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "820261742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4101004187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1140,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "1651070473",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "820261742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4101004187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1210,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "1651070473",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "820261742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4101004187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1054,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1277,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "3572020268",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3536569447",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3456380501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1345,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "3572020268",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3536569447",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3456380501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1361,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "3572020268",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3536569447",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3456380501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1139,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1244,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1299,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1209,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1323,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 144,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1097,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 154,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1375,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1042,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/formhostgroup.php",
          "line": 265,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1755005897",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1278,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "1234335150",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2299675786",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "56877275",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1056,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1176,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 106,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1211,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 116,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1141,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 126,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1246,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 136,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1346,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1300,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1043,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/formhosttemplatemodel.php",
          "line": 1013,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1081167272",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1053,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1243,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "866172118",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1020521546",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2494752928",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1096,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "217028498",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2070204633",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3971995866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1175,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "217028498",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2070204633",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3971995866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1208,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "217028498",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2070204633",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3971995866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1174,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1207,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "1514259649",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1967335801",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4206932166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1360,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "1514259649",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1967335801",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4206932166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1374,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "1514259649",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1967335801",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4206932166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1138,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1276,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1322,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1242,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1344,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 133,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1095,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 143,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1052,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1041,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/formhostcategories.php",
          "line": 266,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1319140125",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1094,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1137,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2706555383",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3352438011",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2784700855",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1051,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 119,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1241,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 129,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1298,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1173,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1321,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 162,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1359,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 172,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1343,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 182,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1275,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 185,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 8,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1040,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/formhost.php",
          "line": 1239,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "91115956",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1439,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable request. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 122,
          "function_name": "hostMacHandler",
          "qualified_function_name": "hostMacHandler",
          "function_prototype": "hostMacHandler(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1951019283",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1020,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 475,
          "function_name": "multipleHostInDB",
          "qualified_function_name": "multipleHostInDB",
          "function_prototype": "multipleHostInDB(array $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1530691746",
        "prototype_hash": "4048442304",
        "flaw_hash": "1329034203",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1463561854",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4179829861",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1075,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 477,
          "function_name": "multipleHostInDB",
          "qualified_function_name": "multipleHostInDB",
          "function_prototype": "multipleHostInDB(array $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1530691746",
        "prototype_hash": "4048442304",
        "flaw_hash": "2525827549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4251847131",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2058155612",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1440,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 1269,
          "function_name": "serviceIsInUse",
          "qualified_function_name": "serviceIsInUse",
          "function_prototype": "serviceIsInUse($, array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "241228200",
        "prototype_hash": "658203422",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1019,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 2380,
          "function_name": "generateHostServiceMultiTemplate",
          "qualified_function_name": "generateHostServiceMultiTemplate",
          "function_prototype": "generateHostServiceMultiTemplate($, $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2393283366",
        "prototype_hash": "2499856254",
        "flaw_hash": "1329034203",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1463561854",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4179829861",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1127,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1032,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 79,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "1148883620",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "140730729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "652358348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1087,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "1148883620",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "140730729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "652358348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1167,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "1148883620",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "140730729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "652358348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1202,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220041862",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1816851323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2386364743",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1271,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 105,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220041862",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1816851323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2386364743",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1295,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220041862",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1816851323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2386364743",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1500,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable rq. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/listcontactgroup.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3712321193",
        "prototype_hash": "4146034803",
        "flaw_hash": "731288724",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1036,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/formcontactgroup.php",
          "line": 235,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1483663693",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1083,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1317,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1029658574",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "184136255",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3470863946",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1030,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1029658574",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "184136255",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3470863946",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1124,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1029658574",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "184136255",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3470863946",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1357,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 122,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1233,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1268,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 148,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1164,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 161,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1339,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 164,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "360254136",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2205344551",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3409745358",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1292,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1037,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/formcontacttemplatemodel.php",
          "line": 704,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2544504683",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1200,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 128,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1318,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 131,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1358,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1293,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1340,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1382,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1084,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1372,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1125,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 195,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1269,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 210,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1234,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 213,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1168,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/formcontact.php",
          "line": 1241,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4069149010",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1291,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1029,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "4146773444",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1724115944",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "589733928",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1371,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 174,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "4207450367",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "690327282",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1443297445",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1381,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 184,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1123,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 194,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1232,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 204,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1082,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 214,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 4,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1267,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 231,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 5,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1356,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 245,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 6,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1163,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 248,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "360254136",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2205344551",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3409745358",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1338,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 262,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 7,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1199,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 265,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 8,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1035,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/formconnector.php",
          "line": 192,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1992818266",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1337,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 43,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1316,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3752786330",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "587933083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2669205043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1028,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3752786330",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "587933083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2669205043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1081,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3752786330",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "587933083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2669205043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1122,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1198,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 102,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1231,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1162,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1266,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty.setTemplateDir",
      "issue_id": 1752,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty.setTemplateDir() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to setTemplateDir() contains data arriving over the network from the variable path. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formmacros.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "714643640",
        "prototype_hash": "4146034803",
        "flaw_hash": "361156111",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1049203265",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1003,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formcommand.php",
          "line": 41,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "272539678",
        "prototype_hash": "4146034803",
        "flaw_hash": "1596550499",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1661796991",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "504285637",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1034,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formcommand.php",
          "line": 378,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "272539678",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty.setTemplateDir",
      "issue_id": 1751,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty.setTemplateDir() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to setTemplateDir() contains data arriving over the network from the variable path. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formarguments.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2214914688",
        "prototype_hash": "4146034803",
        "flaw_hash": "361156111",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1049203265",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1229,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1118,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "2473896231",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2611039798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4218101984",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1263,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "2324082561",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3368075565",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2094938516",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1355,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 114,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1078,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 124,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1159,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1024,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 144,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1195,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 156,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1335,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1315,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 171,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1469,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-servicetemplates.php",
          "line": 116,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1858165266",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1470,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-services.php",
          "line": 204,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "491831894",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1467,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-hosttemplates.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3869042107",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1468,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-hosts.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3724105747",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1501,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/xml/restartpollers.php",
          "line": 254,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3085939104",
        "prototype_hash": "4146034803",
        "flaw_hash": "2042796175",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3005278446",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "858017772",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1478,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/xml/movefiles.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3242283218",
        "prototype_hash": "4146034803",
        "flaw_hash": "843108130",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3357259511",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3812822965",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1048,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/generatefiles.php",
          "line": 52,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3507770666",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1133,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/generatefiles.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3507770666",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1170,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/generatefiles.php",
          "line": 65,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3507770666",
        "prototype_hash": "4146034803",
        "flaw_hash": "2406920325",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "813966242",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2006690501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1033,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/formcentreonbroker.php",
          "line": 307,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "117955174",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1194,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1370,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1290,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3998934740",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2081766564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1465956779",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1022,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3998934740",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2081766564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1465956779",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1077,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3998934740",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2081766564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1465956779",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1117,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1262,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1314,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1228,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 145,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1354,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty.setTemplateDir",
      "issue_id": 1750,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty.setTemplateDir() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to setTemplateDir() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 197,
          "function_name": "initSmartyTpl",
          "qualified_function_name": "initSmartyTpl",
          "function_prototype": "initSmartyTpl($ \u003d null, Smarty $ \u003d null, $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1203976583",
        "prototype_hash": "1549845144",
        "flaw_hash": "3491752863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4158280684",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2117897483",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1463,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1757,
          "function_name": "findHostsForConfigChangeFlagFromHostGroupIds",
          "qualified_function_name": "findHostsForConfigChangeFlagFromHostGroupIds",
          "function_prototype": "findHostsForConfigChangeFlagFromHostGroupIds(array $, $ \u003d true)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3335540026",
        "prototype_hash": "3228094780",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1464,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1799,
          "function_name": "findHostsForConfigChangeFlagFromServiceIds",
          "qualified_function_name": "findHostsForConfigChangeFlagFromServiceIds",
          "function_prototype": "findHostsForConfigChangeFlagFromServiceIds(array $, $ \u003d true)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3653799425",
        "prototype_hash": "841630595",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1466,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1832,
          "function_name": "findServicesForConfigChangeFlagFromServiceTemplateIds",
          "qualified_function_name": "findServicesForConfigChangeFlagFromServiceTemplateIds",
          "function_prototype": "findServicesForConfigChangeFlagFromServiceTemplateIds(array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1040068174",
        "prototype_hash": "934137580",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1465,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1931,
          "function_name": "findPollersForConfigChangeFlagFromHostIds",
          "qualified_function_name": "findPollersForConfigChangeFlagFromHostIds",
          "function_prototype": "findPollersForConfigChangeFlagFromHostIds(array $, $ \u003d true)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1397053502",
        "prototype_hash": "3630440571",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1462,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1959,
          "function_name": "definePollersToUpdated",
          "qualified_function_name": "definePollersToUpdated",
          "function_prototype": "definePollersToUpdated(array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "231396702",
        "prototype_hash": "2233149887",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1503,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/performance/viewdata.php",
          "line": 188,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3818325524",
        "prototype_hash": "4146034803",
        "flaw_hash": "3132762339",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1216,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1390,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "1207559319",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1923232126",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1942731772",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1349,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 62,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "1214053452",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "212276954",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1390861193",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1392,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 65,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "3217464224",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1992643753",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3426333310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1386,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "4004679915",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1120900736",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3844866900",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1304,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "1845755093",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4033612641",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3315779863",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1251,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "95008904",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3884252437",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1114016542",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1378,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "2238640810",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "960455530",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3874240417",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1181,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "4262575150",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3049490910",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3787944088",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1103,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "4172239389",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2695370436",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2731364870",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1061,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "2416776739",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2326424218",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "881471427",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1365,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "451301443",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "480841943",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1369416279",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1145,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 92,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "3529308279",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2762682684",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "22565030",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1328,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "3923018488",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4223915471",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "785054600",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1128,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 329,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "3933704675",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2089858985",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3221761110",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1203,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 439,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "48315207",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3158889252",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1425177925",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1130,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/myaccount/formmyaccount.php",
          "line": 55,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4168022894",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1484,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable logQuery. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/configchangelog/viewlogs.php",
          "line": 217,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4025998898",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1449,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreontraps.class.php",
          "line": 137,
          "function_name": "setMatchingOptions",
          "qualified_function_name": "CentreonTraps.setMatchingOptions",
          "function_prototype": "setMatchingOptions($, ...)",
          "scope": "CentreonTraps"
        }
      },
      "flaw_match": {
        "procedure_hash": "3653126893",
        "prototype_hash": "4293408471",
        "flaw_hash": "105987129",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1450,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreontraps.class.php",
          "line": 602,
          "function_name": "setPreexec",
          "qualified_function_name": "CentreonTraps.setPreexec",
          "function_prototype": "setPreexec($)",
          "scope": "CentreonTraps"
        }
      },
      "flaw_match": {
        "procedure_hash": "381742476",
        "prototype_hash": "4240070029",
        "flaw_hash": "105987129",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1437,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonldapadmin.class.php",
          "line": 602,
          "function_name": "setStatus",
          "qualified_function_name": "CentreonLdapAdmin.setStatus",
          "function_prototype": "setStatus($, array $ \u003d null)",
          "scope": "CentreonLdapAdmin"
        }
      },
      "flaw_match": {
        "procedure_hash": "853894050",
        "prototype_hash": "1556684385",
        "flaw_hash": "1421743569",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2244357461",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2204208184",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1448,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable queryLdapHostParameters. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonldap.class.php",
          "line": 166,
          "function_name": "getLdapHostParameters",
          "qualified_function_name": "CentreonLDAP.getLdapHostParameters",
          "function_prototype": "getLdapHostParameters($, $ \u003d \u0027\u0027)",
          "scope": "CentreonLDAP"
        }
      },
      "flaw_match": {
        "procedure_hash": "3859590991",
        "prototype_hash": "863662575",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1494,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from the incoming HTTP request, data from a backend database, SQL query string-encoded data from the variable queryString. The data from the incoming HTTP request, data from a backend database, SQL query string-encoded data originated from earlier calls to PDOStatement.fetchAll, PDOStatement.fetch, and PDO.quote.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreondb.class.php",
          "line": 309,
          "function_name": "query",
          "qualified_function_name": "CentreonDB.query",
          "function_prototype": "query($, $ \u003d null, $)",
          "scope": "CentreonDB"
        }
      },
      "flaw_match": {
        "procedure_hash": "2197328597",
        "prototype_hash": "4121987459",
        "flaw_hash": "79393993",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1447,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database, SQL query string-encoded data from the variable queryString. The data from a backend database, SQL query string-encoded data originated from earlier calls to PDOStatement.fetch, and PDO.quote.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreondb.class.php",
          "line": 311,
          "function_name": "query",
          "qualified_function_name": "CentreonDB.query",
          "function_prototype": "query($, $ \u003d null, $)",
          "scope": "CentreonDB"
        }
      },
      "flaw_match": {
        "procedure_hash": "2197328597",
        "prototype_hash": "4121987459",
        "flaw_hash": "3013583388",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "738432786",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1446,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreoncustomview.class.php",
          "line": 1088,
          "function_name": "getUsersFromViewId",
          "qualified_function_name": "CentreonCustomView.getUsersFromViewId",
          "function_prototype": "getUsersFromViewId($)",
          "scope": "CentreonCustomView"
        }
      },
      "flaw_match": {
        "procedure_hash": "2379714344",
        "prototype_hash": "3866843674",
        "flaw_hash": "507985455",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1565100084",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "997028404",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1445,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreoncustomview.class.php",
          "line": 1155,
          "function_name": "getUsergroupsFromViewId",
          "qualified_function_name": "CentreonCustomView.getUsergroupsFromViewId",
          "function_prototype": "getUsergroupsFromViewId($)",
          "scope": "CentreonCustomView"
        }
      },
      "flaw_match": {
        "procedure_hash": "1399327800",
        "prototype_hash": "2400341813",
        "flaw_hash": "3557706555",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3835750742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3811990192",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1444,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonconfigcentreonbroker.php",
          "line": 854,
          "function_name": "updateConfig",
          "qualified_function_name": "CentreonConfigCentreonBroker.updateConfig",
          "function_prototype": "updateConfig($, array $)",
          "scope": "CentreonConfigCentreonBroker"
        }
      },
      "flaw_match": {
        "procedure_hash": "990471091",
        "prototype_hash": "427419485",
        "flaw_hash": "105987129",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1073,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data from the incoming HTTP request from the variable webService. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/webservice.class.php",
          "line": 345,
          "function_name": "router",
          "qualified_function_name": "CentreonWebService.router",
          "function_prototype": "router(\\Pimple\\Container______________________________________________________________________________________________________________________________________________________________ $, CentreonUser $, $ \u003d false)",
          "scope": "CentreonWebService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1283094965",
        "prototype_hash": "3841724357",
        "flaw_hash": "2441459579",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "499373397",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "464171429",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1461,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_performance_service.class.php",
          "line": 199,
          "function_name": "getList",
          "qualified_function_name": "CentreonPerformanceService.getList",
          "function_prototype": "getList()",
          "scope": "CentreonPerformanceService"
        }
      },
      "flaw_match": {
        "procedure_hash": "3610310186",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1459,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_metric.class.php",
          "line": 100,
          "function_name": "getList",
          "qualified_function_name": "CentreonMetric.getList",
          "function_prototype": "getList()",
          "scope": "CentreonMetric"
        }
      },
      "flaw_match": {
        "procedure_hash": "520918490",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1460,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_metric.class.php",
          "line": 164,
          "function_name": "getListByService",
          "qualified_function_name": "CentreonMetric.getListByService",
          "function_prototype": "getListByService()",
          "scope": "CentreonMetric"
        }
      },
      "flaw_match": {
        "procedure_hash": "1367694496",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1458,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_home_customview.class.php",
          "line": 81,
          "function_name": "getListSharedViews",
          "qualified_function_name": "CentreonHomeCustomview.getListSharedViews",
          "function_prototype": "getListSharedViews()",
          "scope": "CentreonHomeCustomview"
        }
      },
      "flaw_match": {
        "procedure_hash": "3056354535",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1457,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable queryTimePeriod. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_timeperiod.class.php",
          "line": 102,
          "function_name": "getList",
          "qualified_function_name": "CentreonConfigurationTimeperiod.getList",
          "function_prototype": "getList()",
          "scope": "CentreonConfigurationTimeperiod"
        }
      },
      "flaw_match": {
        "procedure_hash": "294475351",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1456,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable queryContact. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_servicegroup.class.php",
          "line": 180,
          "function_name": "getServiceList",
          "qualified_function_name": "CentreonConfigurationServicegroup.getServiceList",
          "function_prototype": "getServiceList()",
          "scope": "CentreonConfigurationServicegroup"
        }
      },
      "flaw_match": {
        "procedure_hash": "1225237770",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1490,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable queryService. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_service.class.php",
          "line": 219,
          "function_name": "getServicesByHost",
          "qualified_function_name": "CentreonConfigurationService.getServicesByHost",
          "function_prototype": "getServicesByHost($, $, array $ \u003d null, $ \u003d false, $ \u003d \u0027\u0027, $ \u003d \u0027all\u0027, $ \u003d \u0027enable\u0027)",
          "scope": "CentreonConfigurationService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1322320977",
        "prototype_hash": "77539338",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1454,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable queryService. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_service.class.php",
          "line": 245,
          "function_name": "getServicesByHost",
          "qualified_function_name": "CentreonConfigurationService.getServicesByHost",
          "function_prototype": "getServicesByHost($, $, array $ \u003d null, $ \u003d false, $ \u003d \u0027\u0027, $ \u003d \u0027all\u0027, $ \u003d \u0027enable\u0027)",
          "scope": "CentreonConfigurationService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1322320977",
        "prototype_hash": "77539338",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1455,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable queryService. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_service.class.php",
          "line": 336,
          "function_name": "getServicesByHostgroup",
          "qualified_function_name": "CentreonConfigurationService.getServicesByHostgroup",
          "function_prototype": "getServicesByHostgroup($, $, array $ \u003d null)",
          "scope": "CentreonConfigurationService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1696147710",
        "prototype_hash": "2981545508",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1023,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data from the incoming HTTP request from the variable targetedFile. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_objects.class.php",
          "line": 79,
          "function_name": "getDefaultValues",
          "qualified_function_name": "CentreonConfigurationObjects.getDefaultValues",
          "function_prototype": "getDefaultValues()",
          "scope": "CentreonConfigurationObjects"
        }
      },
      "flaw_match": {
        "procedure_hash": "2040983434",
        "prototype_hash": "3850940339",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1453,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable queryValuesRetrieval. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_objects.class.php",
          "line": 221,
          "function_name": "retrieveSimpleValues",
          "qualified_function_name": "CentreonConfigurationObjects.retrieveSimpleValues",
          "function_prototype": "retrieveSimpleValues(array $, $, $)",
          "scope": "CentreonConfigurationObjects"
        }
      },
      "flaw_match": {
        "procedure_hash": "1489267442",
        "prototype_hash": "785860985",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1452,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable queryHostGroup. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_hostgroup.class.php",
          "line": 184,
          "function_name": "getHostList",
          "qualified_function_name": "CentreonConfigurationHostgroup.getHostList",
          "function_prototype": "getHostList()",
          "scope": "CentreonConfigurationHostgroup"
        }
      },
      "flaw_match": {
        "procedure_hash": "1978627071",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1451,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_host.class.php",
          "line": 144,
          "function_name": "getList",
          "qualified_function_name": "CentreonConfigurationHost.getList",
          "function_prototype": "getList()",
          "scope": "CentreonConfigurationHost"
        }
      },
      "flaw_match": {
        "procedure_hash": "1715925028",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.!newinit_0_4",
      "issue_id": 1000,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.PDO.!newinit_0_4() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to !newinit_0_4() contains data arriving over the network from the variable dsn. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 371,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "321005965",
        "prototype_hash": "4146034803",
        "flaw_hash": "1188433013",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "495397802",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.!newinit_0_4",
      "issue_id": 1001,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.PDO.!newinit_0_4() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The third argument to !newinit_0_4() contains data arriving over the network from the variable dbPassword. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 371,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "321005965",
        "prototype_hash": "4146034803",
        "flaw_hash": "1188433013",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "495397802",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1493,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data arriving over the network from the variable query. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/core/platform/infrastructure/repository/dbwriteupdaterepository.php",
          "line": 315,
          "function_name": "executeQuery",
          "qualified_function_name": "Core.Platform.Infrastructure.Repository.DbWriteUpdateRepository.executeQuery",
          "function_prototype": "executeQuery($)",
          "scope": "Core\\Platform\\Infrastructure\\Repository\\DbWriteUpdateRepository"
        }
      },
      "flaw_match": {
        "procedure_hash": "71750162",
        "prototype_hash": "2524871977",
        "flaw_hash": "85533767",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1441,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable sql. The data from the incoming HTTP request originated from an earlier call to file_get_contents.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreon/domain/repository/topologyrepository.php",
          "line": 59,
          "function_name": "disableMenus",
          "qualified_function_name": "Centreon.Domain.Repository.TopologyRepository.disableMenus",
          "function_prototype": "disableMenus()",
          "scope": "Centreon\\Domain\\Repository\\TopologyRepository"
        }
      },
      "flaw_match": {
        "procedure_hash": "3355368011",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1442,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable sql. The data from the incoming HTTP request originated from an earlier call to file_get_contents.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreon/domain/repository/topologyrepository.php",
          "line": 71,
          "function_name": "enableMenus",
          "qualified_function_name": "Centreon.Domain.Repository.TopologyRepository.enableMenus",
          "function_prototype": "enableMenus()",
          "scope": "Centreon\\Domain\\Repository\\TopologyRepository"
        }
      },
      "flaw_match": {
        "procedure_hash": "3219402264",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1005,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/webservices/rest/centreon_openticket.class.php",
          "line": 59,
          "function_name": "postTestProvider",
          "qualified_function_name": "CentreonOpenticket.postTestProvider",
          "function_prototype": "postTestProvider()",
          "scope": "CentreonOpenticket"
        }
      },
      "flaw_match": {
        "procedure_hash": "74803348",
        "prototype_hash": "3850940339",
        "flaw_hash": "941484179",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4241878858",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "166626444",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1112,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 63,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1012,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "3544410750",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "163864047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1053833579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1015,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "3544410750",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "163864047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1053833579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1017,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "3544410750",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "163864047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1053833579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1016,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 78,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1008,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1010,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1004,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1011,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 94,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1014,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1013,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1006,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/formslot.php",
          "line": 236,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3477535901",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1655,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable widgetId. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/src/toolbar.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1313329424",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1676,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) from the variable result. The data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) originated from earlier calls to curl_exec, PDOStatement.fetch, PDO.prepare, PDOStatement.fetchColumn, PDOStatement.fetchAll, and Exception.getMessage.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/src/action.php",
          "line": 279,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4289988711",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1686,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable widgetId. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-httploader/httploader/index.php",
          "line": 102,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4110727900",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1642,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable widgetId. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/src/toolbar.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1385742613",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1665,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) from the variable result. The data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) originated from earlier calls to curl_exec, PDOStatement.fetch, PDO.prepare, PDOStatement.fetchColumn, PDOStatement.fetchAll, and Exception.getMessage.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/src/action.php",
          "line": 218,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "610720668",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1674,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable widgetId. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-global-health/global-health/index.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "127751711",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1639,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable broker. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-global-health/global-health/index.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "127751711",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1675,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable user.get_lang(). The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/main.get.php",
          "line": 235,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1877902131",
        "prototype_hash": "4146034803",
        "flaw_hash": "142506632",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2632393219",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "35952637",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.!newinit_0_4",
      "issue_id": 1002,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. !php_standard_ns.PDO.!newinit_0_4\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/steps/functions.php",
          "line": 105,
          "function_name": "myConnect",
          "qualified_function_name": "myConnect",
          "function_prototype": "myConnect(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1881383889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1426867238",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3637198222",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1567,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request, data from an error message (possibly containing untrusted data). The data from the incoming HTTP request, data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/steps/functions.php",
          "line": 234,
          "function_name": "exitUpgradeProcess",
          "qualified_function_name": "exitUpgradeProcess",
          "function_prototype": "exitUpgradeProcess(Throwable $, $, $, $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "523103742",
        "prototype_hash": "1371200679",
        "flaw_hash": "2996093660",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3830251810",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1281402131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.md5",
      "issue_id": 1723,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the !php_standard_ns.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-18.10.0.post.php",
          "line": 41,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2295020697",
        "prototype_hash": "4146034803",
        "flaw_hash": "2642403402",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "843322108",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.printf",
      "issue_id": 1718,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.printf() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to printf() contains data from a backend database from the variable metric_value. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphs/exportdata/exportcsvservicedata.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2116133793",
        "prototype_hash": "4146034803",
        "flaw_hash": "303194089",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "953065559",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1667,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_hostgrouplogs.php",
          "line": 182,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3053063741",
        "prototype_hash": "4146034803",
        "flaw_hash": "292927559",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3916740167",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1365851955",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.putenv",
      "issue_id": 1514,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.putenv() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to putenv() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicexml.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2388478602",
        "prototype_hash": "4146034803",
        "flaw_hash": "1908809355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1539542995",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2968507215",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1670,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable o. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/service.php",
          "line": 633,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1301996050",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 12,
        "flaw_hash_ordinal": 10,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1694,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable o. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/hosts/host.php",
          "line": 496,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534307865",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 12,
        "flaw_hash_ordinal": 10,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1705,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable search_type_host. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 69,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1711,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable search_type_service. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1704,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable num. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 6,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1709,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3654821752",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4083739807",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "542251235",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1715,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3654821752",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4083739807",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "542251235",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1716,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "2256863522",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2165677229",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "564664049",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1712,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable p. The data from a backend database originated from earlier calls to PDOStatement.fetchAll, PDOStatement.fetch, and PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 8,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1707,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable user_id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 261,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "153852322",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3518461950",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2980565013",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1706,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable nagios_server. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 293,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "172182998",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3709593511",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1821435862",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1710,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 295,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3533125321",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1180848575",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4049957810",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1713,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable nagios_server. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 298,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "172182998",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3709593511",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1821435862",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1714,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable user_id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 319,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "153852322",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3518461950",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2980565013",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1699,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 379,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 13,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1689,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 384,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 15,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1635,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable user_id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 410,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "153852322",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3518461950",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2980565013",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1708,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 459,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 17,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1700,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 464,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 19,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1702,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable o. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/commonjs.php",
          "line": 1051,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597372419",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 70,
        "flaw_hash_ordinal": 67,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1697,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable host_id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 906,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 18,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1698,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable service_id. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 907,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 18,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.putenv",
      "issue_id": 1515,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.putenv() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to putenv() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/views.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3369283479",
        "prototype_hash": "4146034803",
        "flaw_hash": "1908809355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1539542995",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2968507215",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.putenv",
      "issue_id": 1513,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.putenv() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to putenv() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/xml/data.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3312910753",
        "prototype_hash": "4146034803",
        "flaw_hash": "1908809355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1539542995",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2968507215",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1681,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable getInputs. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/viewlog.php",
          "line": 432,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "267764856",
        "prototype_hash": "4146034803",
        "flaw_hash": "2676299565",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762919092",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2994559239",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1664,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/viewlog.php",
          "line": 617,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "267764856",
        "prototype_hash": "4146034803",
        "flaw_hash": "2523459193",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4274178926",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2223207386",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1695,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/viewlog.php",
          "line": 641,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "267764856",
        "prototype_hash": "4146034803",
        "flaw_hash": "2523459193",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4274178926",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2223207386",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1696,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/viewlog.php",
          "line": 657,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "267764856",
        "prototype_hash": "4146034803",
        "flaw_hash": "2523459193",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4274178926",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2223207386",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1701,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/viewlog.php",
          "line": 658,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "267764856",
        "prototype_hash": "4146034803",
        "flaw_hash": "3758013286",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1061548071",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1778868445",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.putenv",
      "issue_id": 1512,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.putenv() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to putenv() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/eventlogs/export/data.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1755338136",
        "prototype_hash": "4146034803",
        "flaw_hash": "1908809355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1539542995",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2968507215",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1663,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data). The data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) originated from earlier calls to curl_exec, PDOStatement.fetchColumn, PDOStatement.fetch, PDOStatement.fetchAll, PDO.prepare, and Exception.getMessage.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/pathway/pathway.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2791461773",
        "prototype_hash": "4146034803",
        "flaw_hash": "2135440781",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "855411806",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4201354478",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1687,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable getMyHostName(). The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/pathway/pathway.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2791461773",
        "prototype_hash": "4146034803",
        "flaw_hash": "1820789738",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1933936961",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2007716869",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1693,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable lang. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/header/htmlheader.php",
          "line": 67,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3771810841",
        "prototype_hash": "4146034803",
        "flaw_hash": "153852322",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3518461950",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2980565013",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1684,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/header/htmlheader.php",
          "line": 242,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3771810841",
        "prototype_hash": "4146034803",
        "flaw_hash": "1160102650",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2974496015",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1001489498",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1662,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/header/htmlheader.php",
          "line": 278,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3771810841",
        "prototype_hash": "4146034803",
        "flaw_hash": "394414414",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2392149519",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2548820120",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1680,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/formtimeperiod.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "845715936",
        "prototype_hash": "4146034803",
        "flaw_hash": "4006454679",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1686045194",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2887751531",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1744,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/formservicetemplatemodel.php",
          "line": 53,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1127471626",
        "prototype_hash": "4146034803",
        "flaw_hash": "855080605",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2535383662",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.putenv",
      "issue_id": 1511,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.putenv() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to putenv() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/xml/argumentsxml.php",
          "line": 63,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4233590362",
        "prototype_hash": "4146034803",
        "flaw_hash": "1908809355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1539542995",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2968507215",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1743,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 81,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "855080605",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2535383662",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1742,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/formhosttemplatemodel.php",
          "line": 40,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1081167272",
        "prototype_hash": "4146034803",
        "flaw_hash": "855080605",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2535383662",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1584,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable _GET.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/resolvehostname.php",
          "line": 60,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2814009975",
        "prototype_hash": "4146034803",
        "flaw_hash": "2422290565",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3830009679",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3146320962",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1614,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data arriving over the network from the variable buffer. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/gethiddenimage.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1383188648",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1638,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetchAll, PDOStatement.fetch, and PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/engine/form.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "542644819",
        "prototype_hash": "4146034803",
        "flaw_hash": "4161485182",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1018200119",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "267133182",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1565,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetchColumn, PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/myaccount/formmyaccount.php",
          "line": 456,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4168022894",
        "prototype_hash": "4146034803",
        "flaw_hash": "4101133174",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2536535848",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2848950739",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1619,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable release. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/about/about.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "51119307",
        "prototype_hash": "4146034803",
        "flaw_hash": "2154745995",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2357872032",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "491167541",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1730,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonservice.class.php",
          "line": 531,
          "function_name": "getCustomMacro",
          "qualified_function_name": "CentreonService.getCustomMacro",
          "function_prototype": "getCustomMacro($ \u003d null, $ \u003d false)",
          "scope": "CentreonService"
        }
      },
      "flaw_match": {
        "procedure_hash": "2115940969",
        "prototype_hash": "1901187345",
        "flaw_hash": "4229590563",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "716105111",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1735,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonservice.class.php",
          "line": 555,
          "function_name": "getCustomMacro",
          "qualified_function_name": "CentreonService.getCustomMacro",
          "function_prototype": "getCustomMacro($ \u003d null, $ \u003d false)",
          "scope": "CentreonService"
        }
      },
      "flaw_match": {
        "procedure_hash": "2115940969",
        "prototype_hash": "1901187345",
        "flaw_hash": "4229590563",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "716105111",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.md5",
      "issue_id": 1726,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the !php_standard_ns.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonlogaction.class.php",
          "line": 430,
          "function_name": "prepareChanges",
          "qualified_function_name": "CentreonLogAction.prepareChanges",
          "function_prototype": "prepareChanges(array $)",
          "scope": "CentreonLogAction"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358454815",
        "prototype_hash": "500724584",
        "flaw_hash": "473673938",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2219608578",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.md5",
      "issue_id": 1725,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the !php_standard_ns.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonlogaction.class.php",
          "line": 432,
          "function_name": "prepareChanges",
          "qualified_function_name": "CentreonLogAction.prepareChanges",
          "function_prototype": "prepareChanges(array $)",
          "scope": "CentreonLogAction"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358454815",
        "prototype_hash": "500724584",
        "flaw_hash": "2760850863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1683037681",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1555,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) from the variable str. The data arriving over the network, data from a backend database, data from an error message (possibly containing untrusted data) originated from earlier calls to curl_exec, PDOStatement.fetchAll, PDOStatement.fetch, Exception.getTraceAsString, and Exception.getMessage.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonlog.class.php",
          "line": 179,
          "function_name": "insertLog",
          "qualified_function_name": "CentreonLog.insertLog",
          "function_prototype": "insertLog($, $, $ \u003d 0, $ \u003d 0, $ \u003d 0)",
          "scope": "CentreonLog"
        }
      },
      "flaw_match": {
        "procedure_hash": "1191662440",
        "prototype_hash": "645120502",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1554,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonhostgroups.class.php",
          "line": 123,
          "function_name": "getHostGroupHosts",
          "qualified_function_name": "CentreonHostgroups.getHostGroupHosts",
          "function_prototype": "getHostGroupHosts($ \u003d null, ...)",
          "scope": "CentreonHostgroups"
        }
      },
      "flaw_match": {
        "procedure_hash": "387096224",
        "prototype_hash": "1419790757",
        "flaw_hash": "782062095",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3380000028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "397689679",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1553,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data arriving over the network from the variable str. The data arriving over the network originated from an earlier call to stream_get_contents.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreongraph.class.php",
          "line": 1460,
          "function_name": "displayImageFlow",
          "qualified_function_name": "CentreonGraph.displayImageFlow",
          "function_prototype": "displayImageFlow()",
          "scope": "CentreonGraph"
        }
      },
      "flaw_match": {
        "procedure_hash": "1263116742",
        "prototype_hash": "3850940339",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1552,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonexternalcommand.class.php",
          "line": 133,
          "function_name": "write",
          "qualified_function_name": "CentreonExternalCommand.write",
          "function_prototype": "write()",
          "scope": "CentreonExternalCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "3711575212",
        "prototype_hash": "3850940339",
        "flaw_hash": "3246882584",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1937624911",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "340920431",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1551,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonexternalcommand.class.php",
          "line": 151,
          "function_name": "setProcessCommand",
          "qualified_function_name": "CentreonExternalCommand.setProcessCommand",
          "function_prototype": "setProcessCommand($, $)",
          "scope": "CentreonExternalCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "3545323098",
        "prototype_hash": "185208179",
        "flaw_hash": "2525079700",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "641591788",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1085083961",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1607,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonexternalcommand.class.php",
          "line": 152,
          "function_name": "setProcessCommand",
          "qualified_function_name": "CentreonExternalCommand.setProcessCommand",
          "function_prototype": "setProcessCommand($, $)",
          "scope": "CentreonExternalCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "3545323098",
        "prototype_hash": "185208179",
        "flaw_hash": "3315382916",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "429083978",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1363277446",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1633,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from an environment variable. The data from an environment variable originated from an earlier call to Centreon.Application.Controller.AbstractController.getBaseUri.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonrtdowntime.class.php",
          "line": 321,
          "function_name": "showHost",
          "qualified_function_name": "CentreonClapi.CentreonRtDowntime.showHost",
          "function_prototype": "showHost(array $)",
          "scope": "CentreonClapi\\CentreonRtDowntime"
        }
      },
      "flaw_match": {
        "procedure_hash": "4132663598",
        "prototype_hash": "1820463406",
        "flaw_hash": "511123389",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "863864904",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3886733166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1634,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from an environment variable. The data from an environment variable originated from an earlier call to Centreon.Application.Controller.AbstractController.getBaseUri.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonrtdowntime.class.php",
          "line": 428,
          "function_name": "showSvc",
          "qualified_function_name": "CentreonClapi.CentreonRtDowntime.showSvc",
          "function_prototype": "showSvc(array $)",
          "scope": "CentreonClapi\\CentreonRtDowntime"
        }
      },
      "flaw_match": {
        "procedure_hash": "4236847368",
        "prototype_hash": "1402702080",
        "flaw_hash": "511123389",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "863864904",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3886733166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1608,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonldap.class.php",
          "line": 165,
          "function_name": "show",
          "qualified_function_name": "CentreonClapi.CentreonLDAP.show",
          "function_prototype": "show($ \u003d null, $ \u003d null)",
          "scope": "CentreonClapi\\CentreonLDAP"
        }
      },
      "flaw_match": {
        "procedure_hash": "1193266161",
        "prototype_hash": "191328138",
        "flaw_hash": "983209545",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2697580992",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3809200651",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1632,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable addStr. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonenginecfg.class.php",
          "line": 326,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonEngineCfg.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonEngineCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1705601714",
        "prototype_hash": "2261109117",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1550,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonenginecfg.class.php",
          "line": 341,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonEngineCfg.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonEngineCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1705601714",
        "prototype_hash": "2261109117",
        "flaw_hash": "2337396340",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1628513784",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2955721203",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1606,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonenginecfg.class.php",
          "line": 361,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonEngineCfg.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonEngineCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1705601714",
        "prototype_hash": "2261109117",
        "flaw_hash": "1650081211",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1689558245",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2042189383",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1631,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondowntime.class.php",
          "line": 195,
          "function_name": "show",
          "qualified_function_name": "CentreonClapi.CentreonDowntime.show",
          "function_prototype": "show($ \u003d null, array $ \u003d null)",
          "scope": "CentreonClapi\\CentreonDowntime"
        }
      },
      "flaw_match": {
        "procedure_hash": "2167034094",
        "prototype_hash": "1555843895",
        "flaw_hash": "1325213917",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1564559023",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2253722929",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1630,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondowntime.class.php",
          "line": 273,
          "function_name": "listperiods",
          "qualified_function_name": "CentreonClapi.CentreonDowntime.listperiods",
          "function_prototype": "listperiods($)",
          "scope": "CentreonClapi\\CentreonDowntime"
        }
      },
      "flaw_match": {
        "procedure_hash": "108899504",
        "prototype_hash": "141774301",
        "flaw_hash": "259353169",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1549,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondowntime.class.php",
          "line": 893,
          "function_name": "exportPeriods",
          "qualified_function_name": "CentreonClapi.CentreonDowntime.exportPeriods",
          "function_prototype": "exportPeriods()",
          "scope": "CentreonClapi\\CentreonDowntime"
        }
      },
      "flaw_match": {
        "procedure_hash": "3597866436",
        "prototype_hash": "3850940339",
        "flaw_hash": "3117547161",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "675692500",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3890777096",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1545,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 482,
          "function_name": "listhostgroupdep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.listhostgroupdep",
          "function_prototype": "listhostgroupdep(array $)",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "568019899",
        "prototype_hash": "869063802",
        "flaw_hash": "1157743407",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "110404057",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "667458511",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1547,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 533,
          "function_name": "listservicedep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.listservicedep",
          "function_prototype": "listservicedep(array $)",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "562423156",
        "prototype_hash": "4054361800",
        "flaw_hash": "3248076737",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2258097312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3512943468",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1548,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 569,
          "function_name": "listservicegroupdep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.listservicegroupdep",
          "function_prototype": "listservicegroupdep(array $)",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "3075150532",
        "prototype_hash": "1011346683",
        "flaw_hash": "2643026453",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4218153621",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4116432913",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1546,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 605,
          "function_name": "listmetadep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.listmetadep",
          "function_prototype": "listmetadep(array $)",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "3567359070",
        "prototype_hash": "3803318933",
        "flaw_hash": "2643026453",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4218153621",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4116432913",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1544,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 655,
          "function_name": "listhostdep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.listhostdep",
          "function_prototype": "listhostdep(array $)",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "744870966",
        "prototype_hash": "2925414853",
        "flaw_hash": "3248076737",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2258097312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3512943468",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1603,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1273,
          "function_name": "exportHostDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostDep",
          "function_prototype": "exportHostDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1019001029",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1625,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1293,
          "function_name": "exportHostDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostDep",
          "function_prototype": "exportHostDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1019001029",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1540,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1314,
          "function_name": "exportHostDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostDep",
          "function_prototype": "exportHostDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1019001029",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1649,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1327,
          "function_name": "exportHostDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostDep",
          "function_prototype": "exportHostDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1019001029",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1628,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1383,
          "function_name": "exportServiceDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServiceDep",
          "function_prototype": "exportServiceDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1854364796",
        "prototype_hash": "3850940339",
        "flaw_hash": "2828103862",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1675507495",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1140804963",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1543,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1403,
          "function_name": "exportServiceDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServiceDep",
          "function_prototype": "exportServiceDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1854364796",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1604,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1424,
          "function_name": "exportServiceDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServiceDep",
          "function_prototype": "exportServiceDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1854364796",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1660,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1437,
          "function_name": "exportServiceDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServiceDep",
          "function_prototype": "exportServiceDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "1854364796",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1650,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1491,
          "function_name": "exportHostgroupDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostgroupDep",
          "function_prototype": "exportHostgroupDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "460735762",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1541,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1511,
          "function_name": "exportHostgroupDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostgroupDep",
          "function_prototype": "exportHostgroupDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "460735762",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1626,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1524,
          "function_name": "exportHostgroupDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportHostgroupDep",
          "function_prototype": "exportHostgroupDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "460735762",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1629,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1578,
          "function_name": "exportServicegroupDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServicegroupDep",
          "function_prototype": "exportServicegroupDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "2555334442",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1652,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1598,
          "function_name": "exportServicegroupDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServicegroupDep",
          "function_prototype": "exportServicegroupDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "2555334442",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1605,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1611,
          "function_name": "exportServicegroupDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportServicegroupDep",
          "function_prototype": "exportServicegroupDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "2555334442",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1651,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1665,
          "function_name": "exportMetaDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportMetaDep",
          "function_prototype": "exportMetaDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "2459009180",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1542,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1685,
          "function_name": "exportMetaDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportMetaDep",
          "function_prototype": "exportMetaDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "2459009180",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1627,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreondependency.class.php",
          "line": 1698,
          "function_name": "exportMetaDep",
          "qualified_function_name": "CentreonClapi.CentreonDependency.exportMetaDep",
          "function_prototype": "exportMetaDep()",
          "scope": "CentreonClapi\\CentreonDependency"
        }
      },
      "flaw_match": {
        "procedure_hash": "2459009180",
        "prototype_hash": "3850940339",
        "flaw_hash": "259353169",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "788723850",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "811046103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1602,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDO.prepare.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncommand.class.php",
          "line": 284,
          "function_name": "getargumentdesc",
          "qualified_function_name": "CentreonClapi.CentreonCommand.getargumentdesc",
          "function_prototype": "getargumentdesc($)",
          "scope": "CentreonClapi\\CentreonCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "3786934161",
        "prototype_hash": "2668703914",
        "flaw_hash": "3597864864",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1334347595",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "587835957",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1538,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncommand.class.php",
          "line": 402,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonCommand.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "3360747809",
        "prototype_hash": "58415397",
        "flaw_hash": "2014164181",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3089761761",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3102720709",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1537,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 256,
          "function_name": "listFlow",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.listFlow",
          "function_prototype": "listFlow($, $, array $)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1981260546",
        "prototype_hash": "1892846877",
        "flaw_hash": "798472936",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3172236232",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2524563455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1601,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 285,
          "function_name": "getFlow",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.getFlow",
          "function_prototype": "getFlow($, $, array $)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "3366446992",
        "prototype_hash": "1540354220",
        "flaw_hash": "3776669623",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "110974579",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4263647282",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1535,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 507,
          "function_name": "getTypeList",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.getTypeList",
          "function_prototype": "getTypeList($ \u003d \u0027\u0027)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "3871026404",
        "prototype_hash": "3324885150",
        "flaw_hash": "324167067",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2516054968",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3565501576",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1648,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 536,
          "function_name": "getFieldList",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.getFieldList",
          "function_prototype": "getFieldList($)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1871678453",
        "prototype_hash": "1971966972",
        "flaw_hash": "455245257",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1109736998",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1438442239",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1600,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 540,
          "function_name": "getFieldList",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.getFieldList",
          "function_prototype": "getFieldList($)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1871678453",
        "prototype_hash": "1971966972",
        "flaw_hash": "3286389547",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2305265482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3603129857",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1536,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 569,
          "function_name": "getValueList",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.getValueList",
          "function_prototype": "getValueList($)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "1680725833",
        "prototype_hash": "3913149749",
        "flaw_hash": "2967982163",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1009744716",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3508540886",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1671,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 810,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "2634373380",
        "prototype_hash": "2045088556",
        "flaw_hash": "2303546679",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3177267623",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "915456336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1682,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database from the variable setParamStr. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 811,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "2634373380",
        "prototype_hash": "2045088556",
        "flaw_hash": "2332300271",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3437815184",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2117897483",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1659,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreoncentbrokercfg.class.php",
          "line": 817,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonCentbrokerCfg.export",
          "function_prototype": "export($ \u003d null)",
          "scope": "CentreonClapi\\CentreonCentbrokerCfg"
        }
      },
      "flaw_match": {
        "procedure_hash": "2634373380",
        "prototype_hash": "2045088556",
        "flaw_hash": "2691623737",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2937304315",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1093309058",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.fopen",
      "issue_id": 1428,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.fopen() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to fopen() contains data from the incoming HTTP request from the variable filename. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 799,
          "function_name": "import",
          "qualified_function_name": "CentreonClapi.CentreonAPI.import",
          "function_prototype": "import($)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "2045618035",
        "prototype_hash": "3047382803",
        "flaw_hash": "80805815",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2296816229",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1658,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 816,
          "function_name": "import",
          "qualified_function_name": "CentreonClapi.CentreonAPI.import",
          "function_prototype": "import($)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "2045618035",
        "prototype_hash": "3047382803",
        "flaw_hash": "2320138946",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1483770421",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1092161824",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1623,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 925,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonAPI.export",
          "function_prototype": "export($ \u003d false)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "3845616022",
        "prototype_hash": "4174144116",
        "flaw_hash": "371830644",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "194814601",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3290609367",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1597,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 939,
          "function_name": "export",
          "qualified_function_name": "CentreonClapi.CentreonAPI.export",
          "function_prototype": "export($ \u003d false)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "3845616022",
        "prototype_hash": "4174144116",
        "flaw_hash": "2227478208",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1479025237",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "893255681",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1533,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 1005,
          "function_name": "fileExists",
          "qualified_function_name": "CentreonClapi.CentreonAPI.fileExists",
          "function_prototype": "fileExists($)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "1080844532",
        "prototype_hash": "1993952667",
        "flaw_hash": "2594543940",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3514771810",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "56692077",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1598,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 1018,
          "function_name": "printLegals",
          "qualified_function_name": "CentreonClapi.CentreonAPI.printLegals",
          "function_prototype": "printLegals()",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "2818570209",
        "prototype_hash": "3850940339",
        "flaw_hash": "679371816",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "516822434",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2095384437",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1599,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 1031,
          "function_name": "printVersion",
          "qualified_function_name": "CentreonClapi.CentreonAPI.printVersion",
          "function_prototype": "printVersion()",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "1266914298",
        "prototype_hash": "3850940339",
        "flaw_hash": "2914021526",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3735919224",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3233776370",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1534,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 1038,
          "function_name": "printVersion",
          "qualified_function_name": "CentreonClapi.CentreonAPI.printVersion",
          "function_prototype": "printVersion()",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "1266914298",
        "prototype_hash": "3850940339",
        "flaw_hash": "586239609",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2722845132",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3597410999",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1596,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 1260,
          "function_name": "exitOnInvalidCredentials",
          "qualified_function_name": "CentreonClapi.CentreonAPI.exitOnInvalidCredentials",
          "function_prototype": "exitOnInvalidCredentials($, $, $)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "2995515558",
        "prototype_hash": "1635005582",
        "flaw_hash": "3334938977",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3704425207",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2191063183",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1530,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 174,
          "function_name": "getPollerList",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.getPollerList",
          "function_prototype": "getPollerList($)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "3825338527",
        "prototype_hash": "34289079",
        "flaw_hash": "3499056094",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2870112795",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "885813562",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1529,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 243,
          "function_name": "execCmd",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.execCmd",
          "function_prototype": "execCmd($)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "1628666366",
        "prototype_hash": "1080500056",
        "flaw_hash": "3204185595",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "402167959",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "507838603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1679,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 371,
          "function_name": "pollerTest",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerTest",
          "function_prototype": "pollerTest($, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "530137313",
        "prototype_hash": "3924833063",
        "flaw_hash": "2327337366",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4229015171",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3397235200",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1532,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 378,
          "function_name": "pollerTest",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerTest",
          "function_prototype": "pollerTest($, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "530137313",
        "prototype_hash": "3924833063",
        "flaw_hash": "1921479063",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "537497723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2437772875",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1666,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 388,
          "function_name": "pollerTest",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerTest",
          "function_prototype": "pollerTest($, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "530137313",
        "prototype_hash": "3924833063",
        "flaw_hash": "2350376415",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3762847668",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1362242028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.chown",
      "issue_id": 1426,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.chown() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to chown() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 418,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "1964673673",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1986912157",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2034490336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.chgrp",
      "issue_id": 1425,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.chgrp() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to chgrp() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 419,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "1964673673",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1986912157",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2034490336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.chown",
      "issue_id": 1427,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.chown() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to chown() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 432,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "1964673673",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1986912157",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2034490336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.chgrp",
      "issue_id": 1424,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.chgrp() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to chgrp() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 433,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "1964673673",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1986912157",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2034490336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1622,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 445,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "733072863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3924175759",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1818062213",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1646,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 447,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "733072863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3924175759",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1818062213",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1531,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 451,
          "function_name": "pollerGenerate",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.pollerGenerate",
          "function_prototype": "pollerGenerate($, $, $)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "139112185",
        "prototype_hash": "580945593",
        "flaw_hash": "2324563117",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3010348982",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3306621457",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1528,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 530,
          "function_name": "cfgMove",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.cfgMove",
          "function_prototype": "cfgMove($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "1391734619",
        "prototype_hash": "2993213733",
        "flaw_hash": "25560675",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3599266092",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1746899317",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.mkdir",
      "issue_id": 1429,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.mkdir() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to mkdir() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 706,
          "function_name": "sendTrapCfg",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.sendTrapCfg",
          "function_prototype": "sendTrapCfg($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "4272948150",
        "prototype_hash": "3194459574",
        "flaw_hash": "972395278",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "640412184",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3554859279",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinvokeglobal",
      "issue_id": 1745,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Generation of Code (\u0027Code Injection\u0027)",
      "cwe_id": "94",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinvokeglobal() contains untrusted input.  If this input could be modified by an attacker, arbitrary code could be injected, which could result in tampering with data or an attacker taking full control over the server. The first argument to !operator_phpinvokeglobal() contains data from the incoming HTTP request from the variable action. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/94.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/webservice.class.php",
          "line": 365,
          "function_name": "router",
          "qualified_function_name": "CentreonWebService.router",
          "function_prototype": "router(\\Pimple\\Container______________________________________________________________________________________________________________________________________________________________ $, CentreonUser $, $ \u003d false)",
          "scope": "CentreonWebService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1283094965",
        "prototype_hash": "3841724357",
        "flaw_hash": "507425845",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3808817713",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty_Internal_TemplateBase.fetch",
      "issue_id": 1749,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty_Internal_TemplateBase.fetch() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. fetch() was called on the tpl object, which contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_broker.class.php",
          "line": 116,
          "function_name": "getBlock",
          "qualified_function_name": "CentreonConfigurationBroker.getBlock",
          "function_prototype": "getBlock()",
          "scope": "CentreonConfigurationBroker"
        }
      },
      "flaw_match": {
        "procedure_hash": "2152691267",
        "prototype_hash": "3850940339",
        "flaw_hash": "3930875010",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1439641998",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.set_include_path",
      "issue_id": 1517,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.set_include_path() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to set_include_path() contains data from an environment variable from the variable implode(). The data from an environment variable originated from an earlier call to get_include_path.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_clapi.class.php",
          "line": 41,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1417820795",
        "prototype_hash": "4146034803",
        "flaw_hash": "1399598165",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3806639776",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "966720939",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1731,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 80,
          "function_name": "testUseCaseWithNotFoundUser",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithNotFoundUser",
          "function_prototype": "testUseCaseWithNotFoundUser()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "4278947461",
        "prototype_hash": "3850940339",
        "flaw_hash": "3591510902",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "271055040",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1732,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 81,
          "function_name": "testUseCaseWithNotFoundUser",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithNotFoundUser",
          "function_prototype": "testUseCaseWithNotFoundUser()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "4278947461",
        "prototype_hash": "3850940339",
        "flaw_hash": "4116150760",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3248373042",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1737,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 105,
          "function_name": "testUseCaseWithInvalidPassword",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithInvalidPassword",
          "function_prototype": "testUseCaseWithInvalidPassword()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "724870933",
        "prototype_hash": "3850940339",
        "flaw_hash": "3591510902",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "271055040",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1734,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 106,
          "function_name": "testUseCaseWithInvalidPassword",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithInvalidPassword",
          "function_prototype": "testUseCaseWithInvalidPassword()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "724870933",
        "prototype_hash": "3850940339",
        "flaw_hash": "4116150760",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3248373042",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.password_hash",
      "issue_id": 1727,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. !php_standard_ns.password_hash\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 109,
          "function_name": "testUseCaseWithInvalidPassword",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithInvalidPassword",
          "function_prototype": "testUseCaseWithInvalidPassword()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "724870933",
        "prototype_hash": "3850940339",
        "flaw_hash": "2176006770",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "809922205",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1733,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 135,
          "function_name": "testUseCaseWithValidParameters",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithValidParameters",
          "function_prototype": "testUseCaseWithValidParameters()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "230519198",
        "prototype_hash": "3850940339",
        "flaw_hash": "3591510902",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "271055040",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1736,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 136,
          "function_name": "testUseCaseWithValidParameters",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithValidParameters",
          "function_prototype": "testUseCaseWithValidParameters()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "230519198",
        "prototype_hash": "3850940339",
        "flaw_hash": "1642212497",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "505598755",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.password_hash",
      "issue_id": 1728,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. !php_standard_ns.password_hash\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/user/application/usecase/renewpassword/renewpasswordtest.php",
          "line": 139,
          "function_name": "testUseCaseWithValidParameters",
          "qualified_function_name": "Tests.Core.Security.User.Application.UseCase.RenewPassword.RenewPasswordTest.testUseCaseWithValidParameters",
          "function_prototype": "testUseCaseWithValidParameters()",
          "scope": "Tests\\Core\\Security\\User\\Application\\UseCase\\RenewPassword\\RenewPasswordTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "230519198",
        "prototype_hash": "3850940339",
        "flaw_hash": "1663633785",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2142582989",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1739,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/providerconfiguration/application/openid/usecase/updateopenidconfiguration/updateopenidconfigurationtest.php",
          "line": 70,
          "function_name": "!func",
          "qualified_function_name": "!closureClass1.!func",
          "function_prototype": "!func()",
          "scope": "!closureClass1"
        }
      },
      "flaw_match": {
        "procedure_hash": "1121011713",
        "prototype_hash": "3671830371",
        "flaw_hash": "3589770429",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1369345681",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1741,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/providerconfiguration/application/openid/usecase/updateopenidconfiguration/updateopenidconfigurationtest.php",
          "line": 121,
          "function_name": "!func",
          "qualified_function_name": "!closureClass2.!func",
          "function_prototype": "!func()",
          "scope": "!closureClass2"
        }
      },
      "flaw_match": {
        "procedure_hash": "22709989",
        "prototype_hash": "2086858363",
        "flaw_hash": "3589770429",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1369345681",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1738,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/providerconfiguration/application/openid/usecase/updateopenidconfiguration/updateopenidconfigurationtest.php",
          "line": 183,
          "function_name": "!func",
          "qualified_function_name": "!closureClass3.!func",
          "function_prototype": "!func()",
          "scope": "!closureClass3"
        }
      },
      "flaw_match": {
        "procedure_hash": "2619377814",
        "prototype_hash": "389976588",
        "flaw_hash": "3589770429",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1369345681",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "hardcodedpasswdset",
      "issue_id": 1740,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/core/security/providerconfiguration/application/openid/usecase/updateopenidconfiguration/updateopenidconfigurationtest.php",
          "line": 236,
          "function_name": "!func",
          "qualified_function_name": "!closureClass4.!func",
          "function_prototype": "!func()",
          "scope": "!closureClass4"
        }
      },
      "flaw_match": {
        "procedure_hash": "2762993605",
        "prototype_hash": "4033841733",
        "flaw_hash": "3589770429",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1369345681",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "setApiCredentials",
      "issue_id": 1729,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. setApiCredentials\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tests/php/centreon/domain/platforminformation/model/platforminformationtest.php",
          "line": 79,
          "function_name": "createEntityForRemoteInformation",
          "qualified_function_name": "Tests.Centreon.Domain.PlatformInformation.Model.PlatformInformationTest.createEntityForRemoteInformation",
          "function_prototype": "createEntityForRemoteInformation(void)",
          "scope": "Tests\\Centreon\\Domain\\PlatformInformation\\Model\\PlatformInformationTest"
        }
      },
      "flaw_match": {
        "procedure_hash": "3881549930",
        "prototype_hash": "4146034803",
        "flaw_hash": "584107549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2405856747",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.md5",
      "issue_id": 1724,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of a Broken or Risky Cryptographic Algorithm",
      "cwe_id": "327",
      "display_text": "\u003cspan\u003eThis function uses the !php_standard_ns.md5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonlegacy/core/utils/utils.php",
          "line": 202,
          "function_name": "encodePass",
          "qualified_function_name": "CentreonLegacy.Core.Utils.Utils.encodePass",
          "function_prototype": "encodePass($, $ \u003d \u0027md5\u0027)",
          "scope": "CentreonLegacy\\Core\\Utils\\Utils"
        }
      },
      "flaw_match": {
        "procedure_hash": "439425692",
        "prototype_hash": "720881796",
        "flaw_hash": "4022777681",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2219608578",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1594,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/cron/centacl.php",
          "line": 593,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1863442237",
        "prototype_hash": "4146034803",
        "flaw_hash": "45058354",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "187207815",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4022322399",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.set_include_path",
      "issue_id": 1516,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.set_include_path() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to set_include_path() contains data from an environment variable from the variable implode(). The data from an environment variable originated from an earlier call to get_include_path.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/bootstrap.php",
          "line": 36,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2027410627",
        "prototype_hash": "4146034803",
        "flaw_hash": "1399598165",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3806639776",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "966720939",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.rename",
      "issue_id": 1432,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.rename() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to rename() contains data from the incoming HTTP request from the variable file_dst. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/views/rules/ajax/actions/uploadfile.php",
          "line": 32,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1843334651",
        "prototype_hash": "4146034803",
        "flaw_hash": "1626908891",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1906137276",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1643,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpecho() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpecho() contains data from the incoming HTTP request from the variable widgetId. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/widgets/open-tickets/src/toolbar.php",
          "line": 121,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2178088140",
        "prototype_hash": "4146034803",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty_Internal_TemplateBase.display",
      "issue_id": 1748,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty_Internal_TemplateBase.display() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. display() was called on the template object, which contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/widgets/open-tickets/src/action.php",
          "line": 93,
          "function_name": "service_ack",
          "qualified_function_name": "service_ack",
          "function_prototype": "service_ack(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "437672881",
        "prototype_hash": "4146034803",
        "flaw_hash": "542694516",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "189183761",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty_Internal_TemplateBase.display",
      "issue_id": 1746,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty_Internal_TemplateBase.display() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. display() was called on the template object, which contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/widgets/open-tickets/src/action.php",
          "line": 154,
          "function_name": "format_popup",
          "qualified_function_name": "format_popup",
          "function_prototype": "format_popup(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "158282121",
        "prototype_hash": "4146034803",
        "flaw_hash": "3376763994",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4255518609",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty_Internal_TemplateBase.display",
      "issue_id": 1747,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty_Internal_TemplateBase.display() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. display() was called on the template object, which contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/widgets/open-tickets/src/action.php",
          "line": 171,
          "function_name": "remove_tickets",
          "qualified_function_name": "remove_tickets",
          "function_prototype": "remove_tickets(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1213020411",
        "prototype_hash": "4146034803",
        "flaw_hash": "1842161125",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2156335581",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.set_include_path",
      "issue_id": 1519,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.set_include_path() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to set_include_path() contains data from an environment variable from the variable implode(). The data from an environment variable originated from an earlier call to get_include_path.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/launchimport.php",
          "line": 30,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2583128651",
        "prototype_hash": "4146034803",
        "flaw_hash": "1399598165",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3806639776",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "966720939",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.move_uploaded_file",
      "issue_id": 1430,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.move_uploaded_file() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to move_uploaded_file() contains data from the incoming HTTP request from the variable uploadFile. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/launchimport.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2583128651",
        "prototype_hash": "4146034803",
        "flaw_hash": "4257270465",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2293903256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "10"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.unlink",
      "issue_id": 1433,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.unlink() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to unlink() contains data from the incoming HTTP request from the variable uploadFile. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/launchimport.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2583128651",
        "prototype_hash": "4146034803",
        "flaw_hash": "2417916287",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "738432786",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.unlink",
      "issue_id": 1434,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.unlink() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to unlink() contains data from the incoming HTTP request from the variable finalFile. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/launchimport.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2583128651",
        "prototype_hash": "4146034803",
        "flaw_hash": "2417916287",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "738432786",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.set_include_path",
      "issue_id": 1518,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Argument Injection or Modification",
      "cwe_id": "88",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.set_include_path() contains an argument injection flaw.  The argument to the function is constructed using untrusted input without properly delimiting or sanitizing it.  It may be possible for an attacker to influence the behavior of the program, for example, changing the destination of an outbound network request or injecting additional commands into an argument or parameter. The first argument to set_include_path() contains data from an environment variable from the variable implode(). The data from an environment variable originated from an earlier call to get_include_path.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/generateexport.php",
          "line": 33,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3590537312",
        "prototype_hash": "4146034803",
        "flaw_hash": "1399598165",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3806639776",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "966720939",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpexit",
      "issue_id": 1717,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to !operator_phpexit() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to !operator_phpexit() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/class/zipanddownload.class.php",
          "line": 34,
          "function_name": "!ctor",
          "qualified_function_name": "ZipAndDownload.!ctor",
          "function_prototype": "!ctor($, $ \u003d \u0027\\\\/tmp\u0027, $ \u003d \u0027.txt\u0027)",
          "scope": "ZipAndDownload"
        }
      },
      "flaw_match": {
        "procedure_hash": "3186487960",
        "prototype_hash": "2970572891",
        "flaw_hash": "2333815474",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4170595102",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1162725348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.readfile",
      "issue_id": 1431,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.readfile() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to readfile() contains data from the incoming HTTP request from the variable archivePath. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/class/zipanddownload.class.php",
          "line": 47,
          "function_name": "!ctor",
          "qualified_function_name": "ZipAndDownload.!ctor",
          "function_prototype": "!ctor($, $ \u003d \u0027\\\\/tmp\u0027, $ \u003d \u0027.txt\u0027)",
          "scope": "ZipAndDownload"
        }
      },
      "flaw_match": {
        "procedure_hash": "3186487960",
        "prototype_hash": "2970572891",
        "flaw_hash": "1638430258",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3440582940",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1573,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-tactical-overview/tactical-overview/index.php",
          "line": 76,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3290496869",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1569,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-single-metric/single-metric/index.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2289297605",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1580,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-servicegroup-monitoring/servicegroup-monitoring/index.php",
          "line": 73,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1080068248",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1587,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/src/sendcmd.php",
          "line": 171,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "601840951",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1657,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/src/action.php",
          "line": 273,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4289988711",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1578,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/index.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "437376175",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1577,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-ntopng-listing/ntopng-listing/index.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "180323785",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1571,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-live-top10-memory-usage/live-top10-memory-usage/index.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2600775844",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1575,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-live-top10-cpu-usage/live-top10-cpu-usage/index.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3904601206",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1673,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-httploader/httploader/index.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4110727900",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1574,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-hostgroup-monitoring/hostgroup-monitoring/src/index.php",
          "line": 79,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "155880343",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1570,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-hostgroup-monitoring/hostgroup-monitoring/index.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2572531460",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1586,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/src/sendcmd.php",
          "line": 155,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "452804394",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1620,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/src/action.php",
          "line": 212,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "610720668",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1568,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/index.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2079971338",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1588,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-grid-map/grid-map/src/table.php",
          "line": 99,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2806213208",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1576,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-grid-map/grid-map/index.php",
          "line": 73,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "28128575",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1615,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-graph-monitoring/graph-monitoring/index.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1835847179",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1669,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-global-health/global-health/index.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "127751711",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1579,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-engine-status/engine-status/index.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "971352068",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1585,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/lib/html/quickform/select2.php",
          "line": 428,
          "function_name": "setDefaultFixedDatas",
          "qualified_function_name": "HTML_QuickForm_select2.setDefaultFixedDatas",
          "function_prototype": "setDefaultFixedDatas()",
          "scope": "HTML_QuickForm_select2"
        }
      },
      "flaw_match": {
        "procedure_hash": "148834258",
        "prototype_hash": "3850940339",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1525,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/lib/html/quickform/html_quickformcustom.php",
          "line": 136,
          "function_name": "checkSecurityToken",
          "qualified_function_name": "HTML_QuickFormCustom.checkSecurityToken",
          "function_prototype": "checkSecurityToken(array $)",
          "scope": "HTML_QuickFormCustom"
        }
      },
      "flaw_match": {
        "procedure_hash": "2390877406",
        "prototype_hash": "1092541816",
        "flaw_hash": "1945410612",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3544740486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "904156283",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1640,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/listvirtualmetrics.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4027193049",
        "prototype_hash": "4146034803",
        "flaw_hash": "1444482788",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3895230903",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3973793914",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1582,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/listvirtualmetrics.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4027193049",
        "prototype_hash": "4146034803",
        "flaw_hash": "3991789856",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "938278920",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3238033029",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1616,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/listvirtualmetrics.php",
          "line": 160,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4027193049",
        "prototype_hash": "4146034803",
        "flaw_hash": "3991789856",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "938278920",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3238033029",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1566,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/formvirtualmetrics.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "774634324",
        "prototype_hash": "4146034803",
        "flaw_hash": "3991789856",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "938278920",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3238033029",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1654,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/formvirtualmetrics.php",
          "line": 320,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "774634324",
        "prototype_hash": "4146034803",
        "flaw_hash": "1169570021",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2591576650",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "956141645",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1523,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/db-func.php",
          "line": 94,
          "function_name": "hasVirtualNameNeverUsed",
          "qualified_function_name": "hasVirtualNameNeverUsed",
          "function_prototype": "hasVirtualNameNeverUsed($ \u003d null, $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3936148414",
        "prototype_hash": "1576809945",
        "flaw_hash": "1444482788",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3895230903",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3973793914",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1591,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/db-func.php",
          "line": 112,
          "function_name": "hasVirtualNameNeverUsed",
          "qualified_function_name": "hasVirtualNameNeverUsed",
          "function_prototype": "hasVirtualNameNeverUsed($ \u003d null, $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3936148414",
        "prototype_hash": "1576809945",
        "flaw_hash": "1444482788",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3895230903",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3973793914",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1522,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/db-func.php",
          "line": 146,
          "function_name": "deleteVirtualMetricInDB",
          "qualified_function_name": "deleteVirtualMetricInDB",
          "function_prototype": "deleteVirtualMetricInDB(array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3988347139",
        "prototype_hash": "4222022267",
        "flaw_hash": "1444482788",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3895230903",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3973793914",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1524,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/db-func.php",
          "line": 170,
          "function_name": "multipleVirtualMetricInDB",
          "qualified_function_name": "multipleVirtualMetricInDB",
          "function_prototype": "multipleVirtualMetricInDB(array $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3128516880",
        "prototype_hash": "605949087",
        "flaw_hash": "1444482788",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3895230903",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3973793914",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1592,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/db-func.php",
          "line": 205,
          "function_name": "multipleVirtualMetricInDB",
          "qualified_function_name": "multipleVirtualMetricInDB",
          "function_prototype": "multipleVirtualMetricInDB(array $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3128516880",
        "prototype_hash": "605949087",
        "flaw_hash": "1444482788",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3895230903",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3973793914",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1692,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_servicelogs.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2134216874",
        "prototype_hash": "4146034803",
        "flaw_hash": "1669058742",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3447437904",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4208277698",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1683,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_servicelogs.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2134216874",
        "prototype_hash": "4146034803",
        "flaw_hash": "1990557714",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2847545666",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3988743596",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1636,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_servicelogs.php",
          "line": 173,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2134216874",
        "prototype_hash": "4146034803",
        "flaw_hash": "2267619694",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3989728588",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2432145969",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1672,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_hostgrouplogs.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3053063741",
        "prototype_hash": "4146034803",
        "flaw_hash": "2546275907",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "989569276",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2596081824",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1691,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_hostgrouplogs.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3053063741",
        "prototype_hash": "4146034803",
        "flaw_hash": "63737811",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1910811364",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1464746350",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1690,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_hostgrouplogs.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3053063741",
        "prototype_hash": "4146034803",
        "flaw_hash": "2698481512",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1639719652",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4255695303",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1559,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/csvexport/csv_hostgrouplogs.php",
          "line": 236,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3053063741",
        "prototype_hash": "4146034803",
        "flaw_hash": "1648566541",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2930425876",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "895762836",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1678,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/syncdir.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3710267050",
        "prototype_hash": "4146034803",
        "flaw_hash": "62015687",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1701212202",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2144911275",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1703,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 896,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "3385032004",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "920019808",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2792168759",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1688,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/hostdetails.php",
          "line": 754,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "966351563",
        "prototype_hash": "4146034803",
        "flaw_hash": "530899365",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1115133945",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3974601167",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1617,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/views.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3369283479",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1644,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/views.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3369283479",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1589,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/views.php",
          "line": 117,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3369283479",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1641,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/rename.php",
          "line": 91,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "440885206",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1685,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/index.php",
          "line": 380,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2142451134",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1668,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/formservers.php",
          "line": 42,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "43539310",
        "prototype_hash": "4146034803",
        "flaw_hash": "2194137677",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "656835634",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2724313606",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1581,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/listconnector.php",
          "line": 172,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "593109065",
        "prototype_hash": "4146034803",
        "flaw_hash": "3024154693",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2873353696",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3722099576",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1613,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/formconnector.php",
          "line": 216,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1992818266",
        "prototype_hash": "4146034803",
        "flaw_hash": "3024154693",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2873353696",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3722099576",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1583,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/proxy/proxy.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251844950",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1558,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1720,
          "function_name": "unvalidFormMessage",
          "qualified_function_name": "unvalidFormMessage",
          "function_prototype": "unvalidFormMessage(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3586638882",
        "prototype_hash": "4146034803",
        "flaw_hash": "811900720",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "717857368",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3814576367",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1560,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/rrdtool/form.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1541005925",
        "prototype_hash": "4146034803",
        "flaw_hash": "607451472",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1135299709",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "640945728",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1637,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 411,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "607451472",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1135299709",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "640945728",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1653,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 413,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "3564695684",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3027491385",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "654068581",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1611,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 416,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "3333760125",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "561266305",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "287135222",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1562,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 418,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "2417303580",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "318081101",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3518925312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1564,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/knowledgebase/formknowledgebase.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4158540381",
        "prototype_hash": "4146034803",
        "flaw_hash": "1105660778",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1097788722",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1427009953",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1561,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/general/form.php",
          "line": 316,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2108747966",
        "prototype_hash": "4146034803",
        "flaw_hash": "3930101713",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "927697677",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3994988933",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1610,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/general/form.php",
          "line": 322,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2108747966",
        "prototype_hash": "4146034803",
        "flaw_hash": "607451472",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1135299709",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "640945728",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1612,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/engine/form.php",
          "line": 171,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "542644819",
        "prototype_hash": "4146034803",
        "flaw_hash": "3930101713",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "927697677",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3994988933",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1563,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/engine/form.php",
          "line": 187,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "542644819",
        "prototype_hash": "4146034803",
        "flaw_hash": "1105660778",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1097788722",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1427009953",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1539,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreondb.class.php",
          "line": 244,
          "function_name": "displayConnectionErrorPage",
          "qualified_function_name": "CentreonDB.displayConnectionErrorPage",
          "function_prototype": "displayConnectionErrorPage($ \u003d null)",
          "scope": "CentreonDB"
        }
      },
      "flaw_match": {
        "procedure_hash": "1606811568",
        "prototype_hash": "3044995929",
        "flaw_hash": "3314801235",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1814447536",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1866792963",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1624,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 821,
          "function_name": "import",
          "qualified_function_name": "CentreonClapi.CentreonAPI.import",
          "function_prototype": "import($)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "2045618035",
        "prototype_hash": "3047382803",
        "flaw_hash": "2653215055",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2654601591",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1222197196",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1647,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonapi.class.php",
          "line": 823,
          "function_name": "import",
          "qualified_function_name": "CentreonClapi.CentreonAPI.import",
          "function_prototype": "import($)",
          "scope": "CentreonClapi\\CentreonAPI"
        }
      },
      "flaw_match": {
        "procedure_hash": "2045618035",
        "prototype_hash": "3047382803",
        "flaw_hash": "2653215055",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2654601591",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1222197196",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1557,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_home_customview.class.php",
          "line": 289,
          "function_name": "getPreferences",
          "qualified_function_name": "CentreonHomeCustomview.getPreferences",
          "function_prototype": "getPreferences()",
          "scope": "CentreonHomeCustomview"
        }
      },
      "flaw_match": {
        "procedure_hash": "1848181944",
        "prototype_hash": "3850940339",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1556,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable e.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_objects.class.php",
          "line": 141,
          "function_name": "retrieveExternalObjectDatas",
          "qualified_function_name": "CentreonConfigurationObjects.retrieveExternalObjectDatas",
          "function_prototype": "retrieveExternalObjectDatas(array $, array $)",
          "scope": "CentreonConfigurationObjects"
        }
      },
      "flaw_match": {
        "procedure_hash": "851347894",
        "prototype_hash": "1369651630",
        "flaw_hash": "2415987059",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3274100841",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.printf",
      "issue_id": 1719,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !php_standard_ns.printf() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The fifth argument to printf() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 129,
          "function_name": "!func",
          "qualified_function_name": "!closureClass0.!func",
          "function_prototype": "!func($, $ \u003d true)",
          "scope": "!closureClass0"
        }
      },
      "flaw_match": {
        "procedure_hash": "4287863598",
        "prototype_hash": "3410305802",
        "flaw_hash": "2560897259",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "743763796",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "7"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.printf",
      "issue_id": 1722,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !php_standard_ns.printf() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The fourth argument to printf() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 137,
          "function_name": "!func",
          "qualified_function_name": "!closureClass0.!func",
          "function_prototype": "!func($, $ \u003d true)",
          "scope": "!closureClass0"
        }
      },
      "flaw_match": {
        "procedure_hash": "4287863598",
        "prototype_hash": "3410305802",
        "flaw_hash": "1617158371",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3237453395",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.printf",
      "issue_id": 1721,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !php_standard_ns.printf() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The third argument to printf() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 145,
          "function_name": "!func",
          "qualified_function_name": "!closureClass0.!func",
          "function_prototype": "!func($, $ \u003d true)",
          "scope": "!closureClass0"
        }
      },
      "flaw_match": {
        "procedure_hash": "4287863598",
        "prototype_hash": "3410305802",
        "flaw_hash": "3589146127",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3234485923",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1590,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/application/clapi/centreonworker.php",
          "line": 102,
          "function_name": "processExportTasks",
          "qualified_function_name": "CentreonRemote.Application.Clapi.CentreonWorker.processExportTasks",
          "function_prototype": "processExportTasks()",
          "scope": "CentreonRemote\\Application\\Clapi\\CentreonWorker"
        }
      },
      "flaw_match": {
        "procedure_hash": "916067632",
        "prototype_hash": "3850940339",
        "flaw_hash": "277736061",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "483614971",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1766749043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1656,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/application/clapi/centreonworker.php",
          "line": 140,
          "function_name": "processImportTasks",
          "qualified_function_name": "CentreonRemote.Application.Clapi.CentreonWorker.processImportTasks",
          "function_prototype": "processImportTasks()",
          "scope": "CentreonRemote\\Application\\Clapi\\CentreonWorker"
        }
      },
      "flaw_match": {
        "procedure_hash": "1617687263",
        "prototype_hash": "3850940339",
        "flaw_hash": "277736061",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "483614971",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1766749043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1521,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/application/clapi/centreonworker.php",
          "line": 194,
          "function_name": "createRemoteTask",
          "qualified_function_name": "CentreonRemote.Application.Clapi.CentreonWorker.createRemoteTask",
          "function_prototype": "createRemoteTask($)",
          "scope": "CentreonRemote\\Application\\Clapi\\CentreonWorker"
        }
      },
      "flaw_match": {
        "procedure_hash": "409696112",
        "prototype_hash": "85650140",
        "flaw_hash": "277736061",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "483614971",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1766749043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1618,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/application/clapi/centreonremoteserver.php",
          "line": 172,
          "function_name": "import",
          "qualified_function_name": "CentreonRemote.Application.Clapi.CentreonRemoteServer.import",
          "function_prototype": "import()",
          "scope": "CentreonRemote\\Application\\Clapi\\CentreonRemoteServer"
        }
      },
      "flaw_match": {
        "procedure_hash": "3888660901",
        "prototype_hash": "3850940339",
        "flaw_hash": "277736061",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "483614971",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1766749043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.printf",
      "issue_id": 1720,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !php_standard_ns.printf() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The second argument to printf() contains data from an error message (possibly containing untrusted data) from the variable ex.getMessage(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/cron/centreon-send-stats.php",
          "line": 59,
          "function_name": "logger",
          "qualified_function_name": "logger",
          "function_prototype": "logger($, Throwable $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1973961616",
        "prototype_hash": "2857005311",
        "flaw_hash": "645158893",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3869444809",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1595,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/cron/centreon-partitioning.php",
          "line": 78,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2706630699",
        "prototype_hash": "4146034803",
        "flaw_hash": "2982979261",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "417398665",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2144764605",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1621,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/cron/centacl.php",
          "line": 747,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1863442237",
        "prototype_hash": "4146034803",
        "flaw_hash": "2578831838",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2848782693",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1364599764",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1677,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/bin/centreon-sanitize-images.php",
          "line": 298,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2632181384",
        "prototype_hash": "4146034803",
        "flaw_hash": "138173812",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1181431761",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2466196661",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1527,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/bin/centreon-sanitize-images.php",
          "line": 307,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2632181384",
        "prototype_hash": "4146034803",
        "flaw_hash": "138173812",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1181431761",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2466196661",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1645,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/bin/centreon-partitioning.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2279448511",
        "prototype_hash": "4146034803",
        "flaw_hash": "2982979261",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "417398665",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2144764605",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1572,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/views/rules/index.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2693611713",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1609,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/views/logs/ajax/actions/exportcsv.php",
          "line": 34,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3670843697",
        "prototype_hash": "4146034803",
        "flaw_hash": "879432279",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "125345964",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2852468521",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1661,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to _.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/views/logs/ajax/actions/exportcsv.php",
          "line": 38,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3670843697",
        "prototype_hash": "4146034803",
        "flaw_hash": "2756207400",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1409878058",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "558007227",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1593,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data) from the variable trim(). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/providers/mail/library/phpmailer.php",
          "line": 927,
          "function_name": "edebug",
          "qualified_function_name": "PHPMailer.PHPMailer.PHPMailer.edebug",
          "function_prototype": "edebug($)",
          "scope": "PHPMailer\\PHPMailer\\PHPMailer"
        }
      },
      "flaw_match": {
        "procedure_hash": "1371419758",
        "prototype_hash": "2588963112",
        "flaw_hash": "2443210130",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2331627109",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4021167741",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpecho",
      "issue_id": 1526,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the !operator_phpecho() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to !operator_phpecho() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to Exception.getMessage.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/widgets/open-tickets/src/action.php",
          "line": 202,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "202146724",
        "prototype_hash": "4146034803",
        "flaw_hash": "686663204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697128818",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2924466395",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1400,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/reloadacl/reloadacl.php",
          "line": 52,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "414930196",
        "prototype_hash": "4146034803",
        "flaw_hash": "619965082",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "922423218",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1405,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/reloadacl/reloadacl.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "414930196",
        "prototype_hash": "4146034803",
        "flaw_hash": "619965082",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "922423218",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.shell_exec",
      "issue_id": 1413,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.shell_exec() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/minhelpcommand.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "6125150",
        "prototype_hash": "4146034803",
        "flaw_hash": "459386335",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1622936513",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1403,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgeneratetraps/formgeneratetraps.php",
          "line": 182,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3494015513",
        "prototype_hash": "4146034803",
        "flaw_hash": "1798182098",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2025601405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1398,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgeneratetraps/formgeneratetraps.php",
          "line": 192,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3494015513",
        "prototype_hash": "4146034803",
        "flaw_hash": "2027304219",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3466111619",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1404,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/xml/movefiles.php",
          "line": 380,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3242283218",
        "prototype_hash": "4146034803",
        "flaw_hash": "1652860811",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2380961787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1399,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/xml/movefiles.php",
          "line": 388,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3242283218",
        "prototype_hash": "4146034803",
        "flaw_hash": "1604806337",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1385268485",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.shell_exec",
      "issue_id": 1412,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.shell_exec() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/common-func.php",
          "line": 68,
          "function_name": "printDebug",
          "qualified_function_name": "printDebug",
          "function_prototype": "printDebug(CentreonXML $, array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1662059937",
        "prototype_hash": "56182856",
        "flaw_hash": "328832985",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3415038418",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.proc_open",
      "issue_id": 1410,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.proc_open() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreongraphng.class.php",
          "line": 1188,
          "function_name": "getJsonStream",
          "qualified_function_name": "CentreonGraphNg.getJsonStream",
          "function_prototype": "getJsonStream()",
          "scope": "CentreonGraphNg"
        }
      },
      "flaw_match": {
        "procedure_hash": "224059987",
        "prototype_hash": "3850940339",
        "flaw_hash": "3779389921",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3623798599",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.proc_open",
      "issue_id": 1409,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.proc_open() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreongraph.class.php",
          "line": 1444,
          "function_name": "displayImageFlow",
          "qualified_function_name": "CentreonGraph.displayImageFlow",
          "function_prototype": "displayImageFlow()",
          "scope": "CentreonGraph"
        }
      },
      "flaw_match": {
        "procedure_hash": "1263116742",
        "prototype_hash": "3850940339",
        "flaw_hash": "3091826114",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4241636506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1397,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonmanufacturer.class.php",
          "line": 135,
          "function_name": "generatetraps",
          "qualified_function_name": "CentreonClapi.CentreonManufacturer.generatetraps",
          "function_prototype": "generatetraps($ \u003d null)",
          "scope": "CentreonClapi\\CentreonManufacturer"
        }
      },
      "flaw_match": {
        "procedure_hash": "3525156123",
        "prototype_hash": "2309343976",
        "flaw_hash": "217804728",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3076519649",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1402,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreonmanufacturer.class.php",
          "line": 136,
          "function_name": "generatetraps",
          "qualified_function_name": "CentreonClapi.CentreonManufacturer.generatetraps",
          "function_prototype": "generatetraps($ \u003d null)",
          "scope": "CentreonClapi\\CentreonManufacturer"
        }
      },
      "flaw_match": {
        "procedure_hash": "3525156123",
        "prototype_hash": "2309343976",
        "flaw_hash": "883565956",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3890410313",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1396,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 713,
          "function_name": "sendTrapCfg",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.sendTrapCfg",
          "function_prototype": "sendTrapCfg($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "4272948150",
        "prototype_hash": "3194459574",
        "flaw_hash": "3878801445",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2787996451",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1423,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 106,
          "function_name": "askQuestion",
          "qualified_function_name": "askQuestion",
          "function_prototype": "askQuestion($, $ \u003d false)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3768804118",
        "prototype_hash": "3250706711",
        "flaw_hash": "3759349562",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2115426688",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1421,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 113,
          "function_name": "askQuestion",
          "qualified_function_name": "askQuestion",
          "function_prototype": "askQuestion($, $ \u003d false)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3768804118",
        "prototype_hash": "3250706711",
        "flaw_hash": "414857415",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3895017844",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1395,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/infrastructure/service/pollerinteractionservice.php",
          "line": 130,
          "function_name": "moveConfigurationFiles",
          "qualified_function_name": "CentreonRemote.Infrastructure.Service.PollerInteractionService.moveConfigurationFiles",
          "function_prototype": "moveConfigurationFiles(array $)",
          "scope": "CentreonRemote\\Infrastructure\\Service\\PollerInteractionService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1134636192",
        "prototype_hash": "1404759046",
        "flaw_hash": "244469478",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3897461300",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1401,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/infrastructure/service/pollerinteractionservice.php",
          "line": 137,
          "function_name": "moveConfigurationFiles",
          "qualified_function_name": "CentreonRemote.Infrastructure.Service.PollerInteractionService.moveConfigurationFiles",
          "function_prototype": "moveConfigurationFiles(array $)",
          "scope": "CentreonRemote\\Infrastructure\\Service\\PollerInteractionService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1134636192",
        "prototype_hash": "1404759046",
        "flaw_hash": "1604806337",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1385268485",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.shell_exec",
      "issue_id": 1411,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.shell_exec() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/infrastructure/service/pollerinteractionservice.php",
          "line": 184,
          "function_name": "restartPoller",
          "qualified_function_name": "CentreonRemote.Infrastructure.Service.PollerInteractionService.restartPoller",
          "function_prototype": "restartPoller(array $)",
          "scope": "CentreonRemote\\Infrastructure\\Service\\PollerInteractionService"
        }
      },
      "flaw_match": {
        "procedure_hash": "407446929",
        "prototype_hash": "286015271",
        "flaw_hash": "1540806678",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3034109047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1416,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/infrastructure/service/exportservice.php",
          "line": 96,
          "function_name": "export",
          "qualified_function_name": "CentreonRemote.Infrastructure.Service.ExportService.export",
          "function_prototype": "export(CentreonRemote::Infrastructure::Export::ExportCommitment $)",
          "scope": "CentreonRemote\\Infrastructure\\Service\\ExportService"
        }
      },
      "flaw_match": {
        "procedure_hash": "2320859222",
        "prototype_hash": "2767081226",
        "flaw_hash": "2037705613",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "469576629",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1417,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/infrastructure/service/exportservice.php",
          "line": 140,
          "function_name": "import",
          "qualified_function_name": "CentreonRemote.Infrastructure.Service.ExportService.import",
          "function_prototype": "import(CentreonRemote::Infrastructure::Export::ExportCommitment $ \u003d null)",
          "scope": "CentreonRemote\\Infrastructure\\Service\\ExportService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1138978099",
        "prototype_hash": "869713028",
        "flaw_hash": "2037705613",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "469576629",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1415,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/application/clapi/centreonremoteserver.php",
          "line": 106,
          "function_name": "enableRemote",
          "qualified_function_name": "CentreonRemote.Application.Clapi.CentreonRemoteServer.enableRemote",
          "function_prototype": "enableRemote($)",
          "scope": "CentreonRemote\\Application\\Clapi\\CentreonRemoteServer"
        }
      },
      "flaw_match": {
        "procedure_hash": "1857787613",
        "prototype_hash": "4024918540",
        "flaw_hash": "3603394618",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "182390760",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1414,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreonremote/application/clapi/centreonremoteserver.php",
          "line": 152,
          "function_name": "disableRemote",
          "qualified_function_name": "CentreonRemote.Application.Clapi.CentreonRemoteServer.disableRemote",
          "function_prototype": "disableRemote()",
          "scope": "CentreonRemote\\Application\\Clapi\\CentreonRemoteServer"
        }
      },
      "flaw_match": {
        "procedure_hash": "2051731106",
        "prototype_hash": "3850940339",
        "flaw_hash": "494437319",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3409338969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1418,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreon/infrastructure/remoteserver/remoteserverrepositoryfile.php",
          "line": 47,
          "function_name": "updateInstanceModeCentral",
          "qualified_function_name": "Centreon.Infrastructure.RemoteServer.RemoteServerRepositoryFile.updateInstanceModeCentral",
          "function_prototype": "updateInstanceModeCentral()",
          "scope": "Centreon\\Infrastructure\\RemoteServer\\RemoteServerRepositoryFile"
        }
      },
      "flaw_match": {
        "procedure_hash": "1194447698",
        "prototype_hash": "3850940339",
        "flaw_hash": "2450581204",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2032813169",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1419,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreon/infrastructure/remoteserver/remoteserverrepositoryfile.php",
          "line": 58,
          "function_name": "updateInstanceModeRemote",
          "qualified_function_name": "Centreon.Infrastructure.RemoteServer.RemoteServerRepositoryFile.updateInstanceModeRemote",
          "function_prototype": "updateInstanceModeRemote()",
          "scope": "Centreon\\Infrastructure\\RemoteServer\\RemoteServerRepositoryFile"
        }
      },
      "flaw_match": {
        "procedure_hash": "1265112364",
        "prototype_hash": "3850940339",
        "flaw_hash": "1792521178",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3224137433",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1420,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/bin/centreon-sanitize-images.php",
          "line": 55,
          "function_name": "!func",
          "qualified_function_name": "!closureClass0.!func",
          "function_prototype": "!func($, $ \u003d false)",
          "scope": "!closureClass0"
        }
      },
      "flaw_match": {
        "procedure_hash": "1822593813",
        "prototype_hash": "3936394448",
        "flaw_hash": "3759349562",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2115426688",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.system",
      "issue_id": 1422,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.system() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/bin/centreon-sanitize-images.php",
          "line": 68,
          "function_name": "!func",
          "qualified_function_name": "!closureClass0.!func",
          "function_prototype": "!func($, $ \u003d false)",
          "scope": "!closureClass0"
        }
      },
      "flaw_match": {
        "procedure_hash": "1822593813",
        "prototype_hash": "3936394448",
        "flaw_hash": "414857415",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3895017844",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.popen",
      "issue_id": 1406,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.popen() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/providers/mail/library/phpmailer.php",
          "line": 1737,
          "function_name": "sendmailSend",
          "qualified_function_name": "PHPMailer.PHPMailer.PHPMailer.sendmailSend",
          "function_prototype": "sendmailSend($, $)",
          "scope": "PHPMailer\\PHPMailer\\PHPMailer"
        }
      },
      "flaw_match": {
        "procedure_hash": "2423409520",
        "prototype_hash": "2667725092",
        "flaw_hash": "1984650999",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "549501684",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.popen",
      "issue_id": 1407,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.popen() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/providers/mail/library/phpmailer.php",
          "line": 1763,
          "function_name": "sendmailSend",
          "qualified_function_name": "PHPMailer.PHPMailer.PHPMailer.sendmailSend",
          "function_prototype": "sendmailSend($, $)",
          "scope": "PHPMailer\\PHPMailer\\PHPMailer"
        }
      },
      "flaw_match": {
        "procedure_hash": "2423409520",
        "prototype_hash": "2667725092",
        "flaw_hash": "1984650999",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "549501684",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.proc_open",
      "issue_id": 1408,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "shell_shock",
      "issue_type": "External Initialization of Trusted Variables or Data Stores",
      "cwe_id": "454",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.proc_open() invokes an external shell. Environment variables inherited from the calling program as well as those modified by the application itself will be passed to the shell. In light of the vulnerability in the shell bash described in CVE-2014-6271, the runtime environment should be reviewed to ensure that this is not an exploitable call.\u003c/span\u003e \u003cspan\u003eIf this application is being run in an environment in which bash is present, ensure that the version of bash used always includes the most recent security updates. Also, in the application itself, consider creating an allowlist of environment variables to protect against external contamination.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/454.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2014-6271\"\u003eCVE-2014-6271\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/providers/abstract/abstractprovider.class.php",
          "line": 1343,
          "function_name": "ExecWaitTimeout",
          "qualified_function_name": "AbstractProvider.ExecWaitTimeout",
          "function_prototype": "ExecWaitTimeout($, $ \u003d 10)",
          "scope": "AbstractProvider"
        }
      },
      "flaw_match": {
        "procedure_hash": "3288764068",
        "prototype_hash": "3486269349",
        "flaw_hash": "982562995",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2087495083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {}
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1013,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-tactical-overview/tactical-overview/src/data_js.js",
          "line": 11,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3667811608",
        "prototype_hash": "2776447912",
        "flaw_hash": "3132762339",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1026,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-single-metric/single-metric/src/data_js.js",
          "line": 34,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3674228119",
        "prototype_hash": "2776447912",
        "flaw_hash": "3741674673",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "584528949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1024,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-servicegroup-monitoring/servicegroup-monitoring/data.js",
          "line": 46,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2072424455",
        "prototype_hash": "2776447912",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1022,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/data.js",
          "line": 42,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "50327299",
        "prototype_hash": "2606963251",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1025,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-ntopng-listing/ntopng-listing/src/data_js.js",
          "line": 16,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3603391573",
        "prototype_hash": "2776447912",
        "flaw_hash": "3741674673",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "584528949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1027,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-live-top10-memory-usage/live-top10-memory-usage/src/data_js.js",
          "line": 15,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3905122932",
        "prototype_hash": "2776447912",
        "flaw_hash": "3741674673",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "584528949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1030,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-live-top10-cpu-usage/live-top10-cpu-usage/src/data_js.js",
          "line": 15,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2039502037",
        "prototype_hash": "2776447912",
        "flaw_hash": "3741674673",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "584528949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1023,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-hostgroup-monitoring/hostgroup-monitoring/data.js",
          "line": 46,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "880595384",
        "prototype_hash": "2776447912",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1020,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/data.js",
          "line": 42,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1224419094",
        "prototype_hash": "2606963251",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1017,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-grid-map/grid-map/src/data_js.js",
          "line": 8,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2665330859",
        "prototype_hash": "2776447912",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1018,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphs/graphs.html",
          "line": 253,
          "function_name": "addChart",
          "qualified_function_name": "addChart",
          "function_prototype": "addChart(: any,  : any,  : any,  : any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2064699541",
        "prototype_hash": "3160143543",
        "flaw_hash": "3924642801",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "283772719",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "584528949",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1028,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphs/graphs.html",
          "line": 263,
          "function_name": "addChart",
          "qualified_function_name": "addChart",
          "function_prototype": "addChart(: any,  : any,  : any,  : any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2064699541",
        "prototype_hash": "3160143543",
        "flaw_hash": "1382144659",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1067728608",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3612762590",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1031,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphs/graphs.html",
          "line": 264,
          "function_name": "addChart",
          "qualified_function_name": "addChart",
          "function_prototype": "addChart(: any,  : any,  : any,  : any,  : any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2064699541",
        "prototype_hash": "3160143543",
        "flaw_hash": "2827154831",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1669230830",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3589805807",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "location",
      "issue_id": 1001,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to location() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphs/graphs.html",
          "line": 478,
          "function_name": "lambda_13",
          "qualified_function_name": "lambda_13",
          "function_prototype": "lambda_13(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1743778587",
        "prototype_hash": "3542609693",
        "flaw_hash": "3490178805",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2965783389",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3987240166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/601.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1032,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customViews/widgetParam.html",
          "line": 73,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1008771862",
        "prototype_hash": "3058835571",
        "flaw_hash": "3397087789",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "477270679",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1186610793",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.attr",
      "issue_id": 1011,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.attr() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customViews/widgetParam.html",
          "line": 73,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1008771862",
        "prototype_hash": "3058835571",
        "flaw_hash": "3874419823",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "679440312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4003366313",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1033,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customViews/widgetParam.html",
          "line": 108,
          "function_name": "lambda_4",
          "qualified_function_name": "lambda_4",
          "function_prototype": "lambda_4(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "704181515",
        "prototype_hash": "4202972175",
        "flaw_hash": "3741674673",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "584528949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.attr",
      "issue_id": 1010,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.attr() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/javascript/datepicker/localizedDatepicker.js",
          "line": 121,
          "function_name": "lambda_2",
          "qualified_function_name": "lambda_2",
          "function_prototype": "lambda_2(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "717279894",
        "prototype_hash": "2659999086",
        "flaw_hash": "335480845",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3203221018",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1129397023",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1019,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/javascript/centreon/popin.js",
          "line": 75,
          "function_name": "lambda_3",
          "qualified_function_name": "lambda_3",
          "function_prototype": "lambda_3(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3527696253",
        "prototype_hash": "706344616",
        "flaw_hash": "3132762339",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQuery",
      "issue_id": 1029,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQuery() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/javascript/centreon/notifier.js",
          "line": 85,
          "function_name": "lambda_9",
          "qualified_function_name": "lambda_9",
          "function_prototype": "lambda_9(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2325941443",
        "prototype_hash": "3521955989",
        "flaw_hash": "3741674673",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "584528949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1016,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/javascript/centreon/centreon-select2.js",
          "line": 545,
          "function_name": "lambda_40",
          "qualified_function_name": "lambda_40",
          "function_prototype": "lambda_40(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3904952668",
        "prototype_hash": "2141923046",
        "flaw_hash": "85533767",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1015,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/javascript/centreon/centreon-select2-optgroup.js",
          "line": 535,
          "function_name": "lambda_41",
          "qualified_function_name": "lambda_41",
          "function_prototype": "lambda_41(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2360808222",
        "prototype_hash": "454639138",
        "flaw_hash": "85533767",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "src",
      "issue_id": 1000,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to src() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/route-components/legacyRoute/index.tsx",
          "line": 67,
          "function_name": "lambda_7",
          "qualified_function_name": "lambda_7",
          "function_prototype": "lambda_7(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3752165455",
        "prototype_hash": "2902181169",
        "flaw_hash": "2595380973",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3017450483",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2117897483",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "set",
      "issue_id": 1008,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/ResetPassword/index.test.tsx",
          "line": 203,
          "function_name": "lambda_11",
          "qualified_function_name": "lambda_11",
          "function_prototype": "lambda_11(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3428921803",
        "prototype_hash": "1370482584",
        "flaw_hash": "605781359",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1256507066",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1007,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/ResetPassword/index.test.tsx",
          "line": 204,
          "function_name": "lambda_11",
          "qualified_function_name": "lambda_11",
          "function_prototype": "lambda_11(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3428921803",
        "prototype_hash": "1370482584",
        "flaw_hash": "2222718384",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "28355486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1003,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/ResetPassword/index.test.tsx",
          "line": 218,
          "function_name": "lambda_12",
          "qualified_function_name": "lambda_12",
          "function_prototype": "lambda_12(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2667588666",
        "prototype_hash": "1020911757",
        "flaw_hash": "605781359",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1256507066",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1004,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/Login/index.test.tsx",
          "line": 223,
          "function_name": "lambda_14",
          "qualified_function_name": "lambda_14",
          "function_prototype": "lambda_14(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1428767775",
        "prototype_hash": "2534668425",
        "flaw_hash": "1618349642",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "316911138",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1006,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/Login/index.test.tsx",
          "line": 249,
          "function_name": "lambda_17",
          "qualified_function_name": "lambda_17",
          "function_prototype": "lambda_17(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3550743039",
        "prototype_hash": "653429799",
        "flaw_hash": "2696089812",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "160873973",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1009,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/front_src/src/Authentication/Openid/index.test.tsx",
          "line": 111,
          "function_name": "!main",
          "qualified_function_name": "!main",
          "function_prototype": "!main() : void",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3971982974",
        "prototype_hash": "211846691",
        "flaw_hash": "1954022828",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1915217164",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1002,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/packages/ui/src/Wizard/index.stories.tsx",
          "line": 339,
          "function_name": "lambda_33",
          "qualified_function_name": "lambda_33",
          "function_prototype": "lambda_33(: any,  : Values, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "66746801",
        "prototype_hash": "1106134858",
        "flaw_hash": "1214961399",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3724877274",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "set",
      "issue_id": 1005,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/packages/ui/src/Wizard/index.stories.tsx",
          "line": 341,
          "function_name": "lambda_33",
          "qualified_function_name": "lambda_33",
          "function_prototype": "lambda_33(: any,  : Values, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "66746801",
        "prototype_hash": "1106134858",
        "flaw_hash": "518988467",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "321810581",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"
    },
    {
      "title": "jQueryResult.append",
      "issue_id": 1021,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/widgets/open-tickets/data.js",
          "line": 8,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1903695717",
        "prototype_hash": "2606963251",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1014,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/js/Import.js",
          "line": 64,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1966396800",
        "prototype_hash": "1826537584",
        "flaw_hash": "4261611221",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "313577691",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2494992650",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1012,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-awie/www/modules/centreon-awie/core/js/Import.js",
          "line": 68,
          "function_name": "lambda_1",
          "qualified_function_name": "lambda_1",
          "function_prototype": "lambda_1(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1966396800",
        "prototype_hash": "1826537584",
        "flaw_hash": "3449838177",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "256293056",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4132130819",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    }
  ],
  "pipeline_scan": "22.12.0-0",
  "dev_stage": "DEVELOPMENT"
}
