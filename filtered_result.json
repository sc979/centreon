{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/354d1b9c-fbb9-428f-82a6-ab63c385fc47/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "354d1b9c-fbb9-428f-82a6-ab63c385fc47",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 1467465 bytes",
  "modules": [
    "JS files within centreon_develop.zip",
    "PHP files within centreon_develop.zip",
    "Python files within centreon_develop.zip"
  ],
  "modules_count": 3,
  "findings": [
    {
      "title": "!php_standard_ns.preg_replace",
      "issue_id": 1520,
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Directives in Dynamically Evaluated Code (\u0027Eval Injection\u0027)",
      "cwe_id": "95",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.preg_replace() contains untrusted input.  If this input could be modified by an attacker, arbitrary PHP code could be executed on the server. The second argument to preg_replace() contains data from a backend database from the variable this.replaceFilter(). The data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/95.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonldap.class.php",
          "line": 298,
          "function_name": "findUserDn",
          "qualified_function_name": "CentreonLDAP.findUserDn",
          "function_prototype": "findUserDn($)",
          "scope": "CentreonLDAP"
        }
      },
      "flaw_match": {
        "procedure_hash": "1200430193",
        "prototype_hash": "628203092",
        "flaw_hash": "254816032",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1574239409",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1176028798",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.passthru",
      "issue_id": 1394,
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.passthru() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to passthru() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 713,
          "function_name": "sendTrapCfg",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.sendTrapCfg",
          "function_prototype": "sendTrapCfg($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "4272948150",
        "prototype_hash": "3194459574",
        "flaw_hash": "3878801445",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2787996451",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2970259658",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.exec",
      "issue_id": 1393,
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreon-clapi/centreon.config.poller.class.php",
          "line": 714,
          "function_name": "sendTrapCfg",
          "qualified_function_name": "CentreonClapi.CentreonConfigPoller.sendTrapCfg",
          "function_prototype": "sendTrapCfg($ \u003d null)",
          "scope": "CentreonClapi\\CentreonConfigPoller"
        }
      },
      "flaw_match": {
        "procedure_hash": "4272948150",
        "prototype_hash": "3194459574",
        "flaw_hash": "597303459",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4168280229",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2784224574",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1473,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-service-monitoring/service-monitoring/src/index.php",
          "line": 402,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2510425979",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1474,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "widgets/centreon-widget-host-monitoring/host-monitoring/src/index.php",
          "line": 248,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3753407221",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1504,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetchColumn, PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/main.get.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1877902131",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.exec",
      "issue_id": 1436,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.exec() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to exec() contains data from a backend database from the variable sprintf(). The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/steps/process/createdbuser.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2420894131",
        "prototype_hash": "4146034803",
        "flaw_hash": "4241758113",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1779099828",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "951022713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.exec",
      "issue_id": 1435,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.exec() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to exec() contains data from a backend database from the variable sprintf(). The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/steps/process/createdbuser.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2420894131",
        "prototype_hash": "4146034803",
        "flaw_hash": "2750340688",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1549679908",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2973471758",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1443,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-22.04.0-beta.1.php",
          "line": 499,
          "function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "qualified_function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "function_prototype": "migrateBrokerConfigOutputsToUnifiedSql(CentreonDB $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3565172808",
        "prototype_hash": "1831767904",
        "flaw_hash": "1203012069",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1803745338",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1815383700",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1492,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-22.04.0-beta.1.php",
          "line": 540,
          "function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "qualified_function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "function_prototype": "migrateBrokerConfigOutputsToUnifiedSql(CentreonDB $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3565172808",
        "prototype_hash": "1831767904",
        "flaw_hash": "2062308891",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3697522926",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1280818426",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1491,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-22.04.0-beta.1.php",
          "line": 616,
          "function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "qualified_function_name": "migrateBrokerConfigOutputsToUnifiedSql",
          "function_prototype": "migrateBrokerConfigOutputsToUnifiedSql(CentreonDB $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3565172808",
        "prototype_hash": "1831767904",
        "flaw_hash": "1475355663",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3514142960",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2999320609",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1505,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetchAll, PDOStatement.fetch, and PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-20.10.6.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1907274939",
        "prototype_hash": "4146034803",
        "flaw_hash": "1956693056",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3347809127",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2807219460",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1485,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/install/php/update-18.10.0.post.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2295020697",
        "prototype_hash": "4146034803",
        "flaw_hash": "3317837724",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1964362962",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2115484440",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1261,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 46,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1313,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "3383000465",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1819133002",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "324478671",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1380,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "3383000465",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1819133002",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "324478671",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1369,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 91,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1072,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "3383000465",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1819133002",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "324478671",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1157,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1192,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1115,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1227,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1334,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1289,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/virtualmetrics/virtualmetrics.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1220379011",
        "prototype_hash": "4146034803",
        "flaw_hash": "2735572103",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1271880405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3356089579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1091,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 88,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1134,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 94,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "2029244291",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1883287235",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2359120406",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1272,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "2029244291",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1883287235",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2359120406",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1296,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 102,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "2029244291",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1883287235",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2359120406",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1049,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "3015655270",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1263480256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3711390252",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1204,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 124,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "3015655270",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1263480256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3711390252",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1238,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/graphtemplates/graphtemplates.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "194052179",
        "prototype_hash": "4146034803",
        "flaw_hash": "3015655270",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1263480256",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3711390252",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1499,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/listcomponenttemplates.php",
          "line": 125,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2004151659",
        "prototype_hash": "4146034803",
        "flaw_hash": "731288724",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1197,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1121,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2722767624",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1563215498",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1846556547",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1027,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2329232156",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2876950336",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1481921804",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1080,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2329232156",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2876950336",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1481921804",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1161,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/views/componenttemplates/componenttemplates.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1711248392",
        "prototype_hash": "4146034803",
        "flaw_hash": "2329232156",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2876950336",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1481921804",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1438,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable rq. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/reporting/dashboard/db-func.php",
          "line": 471,
          "function_name": "getServicesLogs",
          "qualified_function_name": "getServicesLogs",
          "function_prototype": "getServicesLogs(array $, DateTime $, $, array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3365844872",
        "prototype_hash": "3960532224",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1099,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 70,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1057,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "297050210",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "483889186",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4119204812",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1142,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 79,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "297050210",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "483889186",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4119204812",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1177,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "297050210",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "483889186",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4119204812",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1247,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "1788203024",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2655435579",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "253608472",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1324,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "1788203024",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2655435579",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "253608472",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1212,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "3768759649",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2552654460",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2752543838",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1347,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "1820191638",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "879973344",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1902017458",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1301,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/images.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4222857015",
        "prototype_hash": "4146034803",
        "flaw_hash": "3768759649",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2552654460",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2752543838",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1038,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/media/images/formdirectory.php",
          "line": 222,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1477024613",
        "prototype_hash": "4146034803",
        "flaw_hash": "3768759649",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2552654460",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2752543838",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1100,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 45,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1058,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1509882437",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1167064244",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1082146312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1325,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 91,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1509882437",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1167064244",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1082146312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1388,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 1,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1362,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1509882437",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1167064244",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1082146312",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1178,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 2,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1248,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 3,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1143,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 125,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 4,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1302,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 5,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1384,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 6,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1376,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 161,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 7,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1213,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 173,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 8,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1279,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/menusaccess.php",
          "line": 176,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3694783683",
        "prototype_hash": "4146034803",
        "flaw_hash": "1810590479",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 9,
        "cause_hash": "558302312",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1976008497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1495,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/formmenusaccess.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380541713",
        "prototype_hash": "4146034803",
        "flaw_hash": "1626594791",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2679133537",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "126249321",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1506,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/formmenusaccess.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380541713",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1510,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/menusacl/formmenusaccess.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3380541713",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1320,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1206,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "4083388359",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1241513421",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1415824929",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1093,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1172,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1240,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1136,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1274,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 140,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1342,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1297,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/groupsconfig.php",
          "line": 153,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1982406800",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1088,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/options/accesslists/groupsacl/formgroupconfig.php",
          "line": 426,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2207605938",
        "prototype_hash": "4146034803",
        "flaw_hash": "1226645040",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1124674030",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3749070738",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1482,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicesummarybysgxml.php",
          "line": 169,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4263485434",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1488,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query2. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicesummarybysgxml.php",
          "line": 265,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4263485434",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1480,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicegridbysgxml.php",
          "line": 171,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4030666685",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1487,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query2. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/servicesservicegroups/xml/servicegridbysgxml.php",
          "line": 248,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4030666685",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1479,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/serviceshostgroups/xml/servicegridbyhgxml.php",
          "line": 164,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2890243659",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1009,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/serviceshostgroups/servicegridbyhg.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3548224639",
        "prototype_hash": "4146034803",
        "flaw_hash": "4176219578",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3955469432",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3913609784",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1489,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable request. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicexml.php",
          "line": 275,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2388478602",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1483,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicesummaryxml.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "375453905",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1481,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/xml/servicegridxml.php",
          "line": 145,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3562501299",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1007,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/services/service.php",
          "line": 253,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1301996050",
        "prototype_hash": "4146034803",
        "flaw_hash": "2744433302",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2966687061",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4120967819",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1281,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 136,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "3280508398",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3100120682",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "937240035",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1215,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 154,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "497126191",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3803741692",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "168658864",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1060,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "3877015040",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2038245433",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2635944",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1180,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "87104316",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3619732386",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2050005338",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1348,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "1440454828",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "939287885",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2906801778",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1327,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "2415298524",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "719513354",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3486802566",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1250,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 180,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "2929247442",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4164830473",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "558587805",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1364,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/monitoringservice.php",
          "line": 183,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3900382958",
        "prototype_hash": "4146034803",
        "flaw_hash": "3280508398",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3100120682",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "937240035",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1472,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/hosts/xml/hostxml.php",
          "line": 252,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "202171855",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1471,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq1. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/hostgroups/xml/hostgroupxml.php",
          "line": 140,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1339407050",
        "prototype_hash": "4146034803",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1154,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/sethistory.php",
          "line": 41,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "292510545",
        "prototype_hash": "4146034803",
        "flaw_hash": "4025491726",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "731452013",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "336970138",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1190,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/sethistory.php",
          "line": 42,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "292510545",
        "prototype_hash": "4146034803",
        "flaw_hash": "3670718183",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1047889544",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1862534802",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1224,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/status/common/sethistory.php",
          "line": 43,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "292510545",
        "prototype_hash": "4146034803",
        "flaw_hash": "3139024779",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1216215499",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1091010029",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1039,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/formdowntime.php",
          "line": 441,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1054529487",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1341,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "1626444509",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2783805875",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "110111320",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1373,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 81,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "3771219509",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2022402327",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "666472615",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1126,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "3771219509",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2022402327",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "666472615",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1201,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "3771219509",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2022402327",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "666472615",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1165,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1270,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1294,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 117,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1235,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1319,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1085,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1383,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/recurrentdowntime/downtime.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2049473722",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1502,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 142,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "1518387740",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1812648672",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2473418574",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1508,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/servicedetails.php",
          "line": 175,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "407298463",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1507,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/objectdetails/hostdetails.php",
          "line": 142,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "966351563",
        "prototype_hash": "4146034803",
        "flaw_hash": "2186453075",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "547508691",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2118870675",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1086,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "2991191105",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2367873792",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2690228968",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1031,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 62,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "2812361470",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2329746379",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1154535455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1166,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1236,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/downtime/downtime.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "701216641",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220509569",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1762709724",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2833919267",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1230,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 63,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "19684695",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3250703234",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "293941771",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1336,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1079,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 69,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "3791563778",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2506811073",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4120798394",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1026,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "906361703",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2436346519",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4195164924",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1196,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1265,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1120,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/comments.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4072951115",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1160,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "19684695",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3250703234",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "293941771",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1264,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "1275858774",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4205478656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3093278809",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1025,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "1275858774",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4205478656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3093278809",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1119,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/commenthost.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3441418691",
        "prototype_hash": "4146034803",
        "flaw_hash": "1275858774",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4205478656",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3093278809",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1018,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/addcomment.php",
          "line": 179,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2478131083",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1074,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/monitoring/comments/addcomment.php",
          "line": 207,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2478131083",
        "prototype_hash": "4146034803",
        "flaw_hash": "2373589445",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "739577307",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4024607527",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1477,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable sql. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/home/customviews/triggers/loadservicefromhost.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3818226185",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1498,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetchColumn.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/core/header/htmlheader.php",
          "line": 267,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3771810841",
        "prototype_hash": "4146034803",
        "flaw_hash": "1991353744",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1182,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1283,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1306,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "148557191",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "259657077",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3490139103",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1063,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1147,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1218,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 151,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1105,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/servers.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "397486178",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1509,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/popup/popup.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1236420196",
        "prototype_hash": "4146034803",
        "flaw_hash": "731288724",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1089,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configservers/formservers.php",
          "line": 444,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "43539310",
        "prototype_hash": "4146034803",
        "flaw_hash": "935338047",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "581561540",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2351265773",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1062,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 52,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1252,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1146,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "1723854054",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2228454518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1819943010",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1350,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 129,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "1723854054",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2228454518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1819943010",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1366,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "1723854054",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2228454518",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1819943010",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1104,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 150,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1282,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1305,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 183,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1217,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 198,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1329,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configresources/resources.php",
          "line": 201,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "198054618",
        "prototype_hash": "4146034803",
        "flaw_hash": "359579202",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1520680482",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4251383497",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1260,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1897253059",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "565741390",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1956690104",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1312,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1897253059",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "565741390",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1956690104",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1071,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 88,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1333,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1897253059",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "565741390",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1956690104",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1156,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1191,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1114,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1226,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/traps.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1564725887",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1047,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps/formtraps.php",
          "line": 446,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4205090953",
        "prototype_hash": "4146034803",
        "flaw_hash": "1077071454",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2843557827",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1531747219",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1239,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1135,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 67,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "805132929",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "119802506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "971392603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1205,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 70,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "805132929",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "119802506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "971392603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1273,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 73,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "805132929",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "119802506",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "971392603",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1050,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "3702538773",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3147986951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1643282742",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1092,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "3702538773",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3147986951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1643282742",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1171,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/traps-groups/groups.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1522494680",
        "prototype_hash": "4146034803",
        "flaw_hash": "3702538773",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3147986951",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1643282742",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1070,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 45,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1259,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "1012574587",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "670384947",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1422937529",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1155,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 75,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "1937402683",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3639188258",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4207878402",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1113,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 88,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1225,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1288,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/timeperiod.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "851961009",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1046,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/timeperiod/formtimeperiod.php",
          "line": 301,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "845715936",
        "prototype_hash": "4146034803",
        "flaw_hash": "2426386347",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1796685879",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1920429567",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1111,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 55,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1257,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "662435052",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1911825179",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "158535399",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1188,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 99,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "52537051",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3334477969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3267066144",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1222,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "52537051",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3334477969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3267066144",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1068,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup_dependency/servicegroupdependency.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3783807042",
        "prototype_hash": "4146034803",
        "flaw_hash": "52537051",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3334477969",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3267066144",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1286,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1256,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "1880478376",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2999664498",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4109366082",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1110,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1187,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1221,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1152,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1310,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/servicegroup.php",
          "line": 133,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2146939121",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1476,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/listservicegroup.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2697657033",
        "prototype_hash": "4146034803",
        "flaw_hash": "3194648131",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1645883928",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3864586907",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1486,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/listservicegroup.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2697657033",
        "prototype_hash": "4146034803",
        "flaw_hash": "635970932",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2518027787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2535566626",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1045,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/servicegroup/formservicegroup.php",
          "line": 236,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "513235245",
        "prototype_hash": "4146034803",
        "flaw_hash": "2976495330",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3909024212",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3435296387",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1258,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "113651201",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1352939829",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "922584964",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1332,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 105,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1153,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 115,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1189,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 125,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1069,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1223,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 145,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1311,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 155,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1287,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/servicetemplatemodel.php",
          "line": 158,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2541018975",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1132,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_template_model/formservicetemplatemodel.php",
          "line": 1051,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1127471626",
        "prototype_hash": "4146034803",
        "flaw_hash": "3275239646",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4153093704",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2942511310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1151,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 55,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1067,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "2564343283",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1743111405",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "403653409",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1109,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "3477343398",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "432793790",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3459299608",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1186,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "3477343398",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "432793790",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3459299608",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1220,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_dependency/servicedependency.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "508112315",
        "prototype_hash": "4146034803",
        "flaw_hash": "3477343398",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "432793790",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3459299608",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1150,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 45,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1066,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "2467764723",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2606957825",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "194259866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1185,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1285,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1309,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1255,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 117,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1331,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1108,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 140,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1353,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/servicecategories.php",
          "line": 143,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3560824094",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1044,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service_categories/formservicecategories.php",
          "line": 249,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4253503233",
        "prototype_hash": "4146034803",
        "flaw_hash": "1578191086",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "154433381",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2593500359",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1368,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1352,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "4033060633",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2823675762",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "856993368",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1330,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 1,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1387,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 128,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 2,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1107,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 3,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1379,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 148,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 4,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1184,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 158,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 5,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1308,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 6,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1254,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 178,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 7,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1065,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 188,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 8,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1149,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhostgroup.php",
          "line": 191,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2496455804",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 9,
        "flaw_hash_ordinal": 9,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1253,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1219,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 127,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "4033060633",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2823675762",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "856993368",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1183,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1307,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1367,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1284,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1064,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1148,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 187,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1106,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 197,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1351,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/servicebyhost.php",
          "line": 200,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1347624093",
        "prototype_hash": "4146034803",
        "flaw_hash": "146011227",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 8,
        "cause_hash": "1554787133",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "183435050",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1475,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/listservicebyhostgroup.php",
          "line": 240,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2525388630",
        "prototype_hash": "4146034803",
        "flaw_hash": "2695482536",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1497,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 66,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "2482568152",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3567500176",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3056884531",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1131,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1197,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "3094714589",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2566752999",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "5921533",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1090,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1201,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "1440985389",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1135755930",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2017436371",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1237,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1203,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "429496584",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "553212178",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3914737432",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1169,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/service/formservice.php",
          "line": 1205,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "770601657",
        "prototype_hash": "4146034803",
        "flaw_hash": "1440985389",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1135755930",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2017436371",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1158,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 51,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1116,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 81,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "801336567",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3058757561",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "223069611",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1193,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 94,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "661752356",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2136336933",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2257869613",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1021,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 104,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "661752356",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2136336933",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2257869613",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1076,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/metaservice_dependency/metaservicedependency.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1358487053",
        "prototype_hash": "4146034803",
        "flaw_hash": "661752356",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2136336933",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2257869613",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1102,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metric.php",
          "line": 202,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3582294297",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1179,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1059,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "1004567135",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1113711270",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "275733393",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1144,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1326,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1377,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 133,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1303,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1101,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1249,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 152,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3799628418",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1931011625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1817602659",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1389,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 155,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3799628418",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1931011625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1817602659",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1280,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 165,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1363,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 175,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1391,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 178,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3799628418",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1931011625",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1817602659",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1214,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 188,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "3284474816",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1394611486",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1992753526",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1385,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/metaservice.php",
          "line": 191,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "620578362",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1496,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/formmetaservice.php",
          "line": 73,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4135239758",
        "prototype_hash": "4146034803",
        "flaw_hash": "3958287864",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "588337286",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1617033469",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1129,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/meta_service/formmetaservice.php",
          "line": 346,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4135239758",
        "prototype_hash": "4146034803",
        "flaw_hash": "897186949",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1060860743",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1985007500",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1098,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1245,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "638734605",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "984828242",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "688857279",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1055,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "1651070473",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "820261742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4101004187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1140,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "1651070473",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "820261742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4101004187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1210,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup_dependency/hostgroupdependency.php",
          "line": 111,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "144426236",
        "prototype_hash": "4146034803",
        "flaw_hash": "1651070473",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "820261742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4101004187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1054,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1277,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "3572020268",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3536569447",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3456380501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1345,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "3572020268",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3536569447",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3456380501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1361,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "3572020268",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3536569447",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3456380501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1139,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 100,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1244,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1299,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 120,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1209,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 130,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1323,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 144,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1097,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 154,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1375,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/hostgroup.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3008858889",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1042,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/hostgroup/formhostgroup.php",
          "line": 265,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1755005897",
        "prototype_hash": "4146034803",
        "flaw_hash": "1799290116",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "668018787",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3956862126",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1278,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "1234335150",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2299675786",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "56877275",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1056,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1176,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 106,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1211,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 116,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1141,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 126,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1246,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 136,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1346,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1300,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/hosttemplatemodel.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2534248570",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1043,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_template_model/formhosttemplatemodel.php",
          "line": 1013,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1081167272",
        "prototype_hash": "4146034803",
        "flaw_hash": "4232129313",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "647360723",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "458443656",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1053,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1243,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 84,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "866172118",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1020521546",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2494752928",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1096,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "217028498",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2070204633",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3971995866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1175,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 107,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "217028498",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2070204633",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3971995866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1208,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_dependency/hostdependency.php",
          "line": 110,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3259377661",
        "prototype_hash": "4146034803",
        "flaw_hash": "217028498",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2070204633",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3971995866",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1174,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1207,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "1514259649",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1967335801",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4206932166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1360,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "1514259649",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1967335801",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4206932166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1374,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "1514259649",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1967335801",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4206932166",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1138,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1276,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1322,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1242,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1344,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 133,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1095,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 143,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1052,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/hostcategories.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "488681098",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1041,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host_categories/formhostcategories.php",
          "line": 266,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1319140125",
        "prototype_hash": "4146034803",
        "flaw_hash": "2654287174",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3869977016",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "834034851",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1094,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 57,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1137,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2706555383",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3352438011",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2784700855",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1051,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 119,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1241,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 129,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1298,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1173,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1321,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 162,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1359,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 172,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1343,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 182,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 7,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1275,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/host.php",
          "line": 185,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3448644675",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 8,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1040,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/formhost.php",
          "line": 1239,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "91115956",
        "prototype_hash": "4146034803",
        "flaw_hash": "2709322024",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1580967006",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1999066455",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1439,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable request. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 122,
          "function_name": "hostMacHandler",
          "qualified_function_name": "hostMacHandler",
          "function_prototype": "hostMacHandler(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1951019283",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1020,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 475,
          "function_name": "multipleHostInDB",
          "qualified_function_name": "multipleHostInDB",
          "function_prototype": "multipleHostInDB(array $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1530691746",
        "prototype_hash": "4048442304",
        "flaw_hash": "1329034203",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1463561854",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4179829861",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1075,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 477,
          "function_name": "multipleHostInDB",
          "qualified_function_name": "multipleHostInDB",
          "function_prototype": "multipleHostInDB(array $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1530691746",
        "prototype_hash": "4048442304",
        "flaw_hash": "2525827549",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4251847131",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2058155612",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1440,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable rq. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 1269,
          "function_name": "serviceIsInUse",
          "qualified_function_name": "serviceIsInUse",
          "function_prototype": "serviceIsInUse($, array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "241228200",
        "prototype_hash": "658203422",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {}
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1019,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/host/db-func.php",
          "line": 2380,
          "function_name": "generateHostServiceMultiTemplate",
          "qualified_function_name": "generateHostServiceMultiTemplate",
          "function_prototype": "generateHostServiceMultiTemplate($, $ \u003d null, array $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2393283366",
        "prototype_hash": "2499856254",
        "flaw_hash": "1329034203",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1463561854",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4179829861",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1127,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1032,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 79,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "1148883620",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "140730729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "652358348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1087,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "1148883620",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "140730729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "652358348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1167,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 85,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "1148883620",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "140730729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "652358348",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1202,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 95,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220041862",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1816851323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2386364743",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1271,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 105,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220041862",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1816851323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2386364743",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1295,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/escalation/escalation.php",
          "line": 108,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "29575246",
        "prototype_hash": "4146034803",
        "flaw_hash": "4220041862",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1816851323",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2386364743",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1500,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable rq. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/listcontactgroup.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3712321193",
        "prototype_hash": "4146034803",
        "flaw_hash": "731288724",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1036,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/formcontactgroup.php",
          "line": 235,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1483663693",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1083,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 61,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1317,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1029658574",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "184136255",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3470863946",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1030,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 103,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1029658574",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "184136255",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3470863946",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1124,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 109,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1029658574",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "184136255",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3470863946",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1357,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 122,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1233,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 135,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1268,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 148,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1164,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 161,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1339,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 164,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "360254136",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2205344551",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3409745358",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1292,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contactgroup/contactgroup.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2923022646",
        "prototype_hash": "4146034803",
        "flaw_hash": "1073153527",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "1158813804",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3730753859",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1037,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/formcontacttemplatemodel.php",
          "line": 704,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2544504683",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1200,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 128,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1318,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 131,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 2,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1358,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 3,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1293,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 137,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "3695799600",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "375607860",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "505727326",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1340,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 147,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1382,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 157,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1084,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 167,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1372,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 177,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1125,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 195,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1269,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 210,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1234,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact_template_model/contact_template.php",
          "line": 213,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2050778520",
        "prototype_hash": "4146034803",
        "flaw_hash": "580172055",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "3846314517",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "730350713",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1168,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/formcontact.php",
          "line": 1241,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4069149010",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1291,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1029,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "4146773444",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1724115944",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "589733928",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1371,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 174,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "4207450367",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "690327282",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1443297445",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1381,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 184,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1123,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 194,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 2,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1232,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 204,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 3,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1082,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 214,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 4,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1267,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 231,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 5,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1356,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 245,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 6,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1163,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 248,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "360254136",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2205344551",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3409745358",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1338,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 262,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 7,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1199,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/contact/contact.php",
          "line": 265,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4251736585",
        "prototype_hash": "4146034803",
        "flaw_hash": "3972898590",
        "flaw_hash_count": 8,
        "flaw_hash_ordinal": 8,
        "cause_hash": "4064003248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1649246487",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1035,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/formconnector.php",
          "line": 192,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1992818266",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1337,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 43,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1316,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3752786330",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "587933083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2669205043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1028,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3752786330",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "587933083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2669205043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1081,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 72,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3752786330",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "587933083",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2669205043",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1122,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 87,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1198,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 102,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1231,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 118,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1162,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1266,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/connector/connector.php",
          "line": 138,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2759118707",
        "prototype_hash": "4146034803",
        "flaw_hash": "3165097075",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2092409021",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2626128932",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty.setTemplateDir",
      "issue_id": 1752,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty.setTemplateDir() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to setTemplateDir() contains data arriving over the network from the variable path. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formmacros.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "714643640",
        "prototype_hash": "4146034803",
        "flaw_hash": "361156111",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1049203265",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1003,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formcommand.php",
          "line": 41,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "272539678",
        "prototype_hash": "4146034803",
        "flaw_hash": "1596550499",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1661796991",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "504285637",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1034,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formcommand.php",
          "line": 378,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "272539678",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty.setTemplateDir",
      "issue_id": 1751,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty.setTemplateDir() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to setTemplateDir() contains data arriving over the network from the variable path. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/formarguments.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2214914688",
        "prototype_hash": "4146034803",
        "flaw_hash": "361156111",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1049203265",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1229,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 49,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1118,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "2473896231",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2611039798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4218101984",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1263,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "2324082561",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3368075565",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2094938516",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1355,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 114,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1078,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 124,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1159,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1024,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 144,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1195,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 156,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1335,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 168,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1315,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configobject/command/command.php",
          "line": 171,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4054380476",
        "prototype_hash": "4146034803",
        "flaw_hash": "569795939",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "2513031427",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3795229747",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1469,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-servicetemplates.php",
          "line": 116,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1858165266",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1470,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-services.php",
          "line": 204,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "491831894",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1467,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-hosttemplates.php",
          "line": 113,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3869042107",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1468,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configknowledge/display-hosts.php",
          "line": 139,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3724105747",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1501,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/xml/restartpollers.php",
          "line": 254,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3085939104",
        "prototype_hash": "4146034803",
        "flaw_hash": "2042796175",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3005278446",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "858017772",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1478,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/xml/movefiles.php",
          "line": 146,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3242283218",
        "prototype_hash": "4146034803",
        "flaw_hash": "843108130",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3357259511",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3812822965",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1048,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/generatefiles.php",
          "line": 52,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3507770666",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1133,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/generatefiles.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3507770666",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1170,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configgenerate/generatefiles.php",
          "line": 65,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3507770666",
        "prototype_hash": "4146034803",
        "flaw_hash": "2406920325",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "813966242",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2006690501",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1033,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/formcentreonbroker.php",
          "line": 307,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "117955174",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1194,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 64,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1370,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "2180932326",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "62717869",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1925215405",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1290,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 93,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3998934740",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2081766564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1465956779",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1022,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 97,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3998934740",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2081766564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1465956779",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1077,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3998934740",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2081766564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1465956779",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1117,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 112,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 1,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1262,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 123,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 2,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1314,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 134,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1228,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 145,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 4,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1354,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/configuration/configcentreonbroker/centreon-broker.php",
          "line": 149,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1334417695",
        "prototype_hash": "4146034803",
        "flaw_hash": "3321737524",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 5,
        "cause_hash": "573011213",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1559665347",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.Smarty.setTemplateDir",
      "issue_id": 1750,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.Smarty.setTemplateDir() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to setTemplateDir() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 197,
          "function_name": "initSmartyTpl",
          "qualified_function_name": "initSmartyTpl",
          "function_prototype": "initSmartyTpl($ \u003d null, Smarty $ \u003d null, $ \u003d null)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1203976583",
        "prototype_hash": "1549845144",
        "flaw_hash": "3491752863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4158280684",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2117897483",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1463,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1757,
          "function_name": "findHostsForConfigChangeFlagFromHostGroupIds",
          "qualified_function_name": "findHostsForConfigChangeFlagFromHostGroupIds",
          "function_prototype": "findHostsForConfigChangeFlagFromHostGroupIds(array $, $ \u003d true)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3335540026",
        "prototype_hash": "3228094780",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1464,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1799,
          "function_name": "findHostsForConfigChangeFlagFromServiceIds",
          "qualified_function_name": "findHostsForConfigChangeFlagFromServiceIds",
          "function_prototype": "findHostsForConfigChangeFlagFromServiceIds(array $, $ \u003d true)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3653799425",
        "prototype_hash": "841630595",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1466,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1832,
          "function_name": "findServicesForConfigChangeFlagFromServiceTemplateIds",
          "qualified_function_name": "findServicesForConfigChangeFlagFromServiceTemplateIds",
          "function_prototype": "findServicesForConfigChangeFlagFromServiceTemplateIds(array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1040068174",
        "prototype_hash": "934137580",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1465,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1931,
          "function_name": "findPollersForConfigChangeFlagFromHostIds",
          "qualified_function_name": "findPollersForConfigChangeFlagFromHostIds",
          "function_prototype": "findPollersForConfigChangeFlagFromHostIds(array $, $ \u003d true)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "1397053502",
        "prototype_hash": "3630440571",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1462,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/common/common-func.php",
          "line": 1959,
          "function_name": "definePollersToUpdated",
          "qualified_function_name": "definePollersToUpdated",
          "function_prototype": "definePollersToUpdated(array $)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "231396702",
        "prototype_hash": "2233149887",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1503,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/performance/viewdata.php",
          "line": 188,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3818325524",
        "prototype_hash": "4146034803",
        "flaw_hash": "3132762339",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1216,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 54,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1390,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 59,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "1207559319",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1923232126",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1942731772",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1349,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 62,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "1214053452",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "212276954",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1390861193",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1392,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 65,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "3217464224",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1992643753",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3426333310",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1386,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "4004679915",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1120900736",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3844866900",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1304,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "1845755093",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4033612641",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3315779863",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1251,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "95008904",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3884252437",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1114016542",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1378,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 77,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "2238640810",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "960455530",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3874240417",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1181,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 80,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "4262575150",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3049490910",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3787944088",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1103,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 83,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "4172239389",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2695370436",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2731364870",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1061,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "2416776739",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2326424218",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "881471427",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1365,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 89,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "451301443",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "480841943",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1369416279",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1145,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 92,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "3529308279",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2762682684",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "22565030",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1328,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/parameters.php",
          "line": 96,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3628010006",
        "prototype_hash": "4146034803",
        "flaw_hash": "3923018488",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4223915471",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "785054600",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1128,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 329,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "3933704675",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2089858985",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3221761110",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1203,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/parameters/ldap/form.php",
          "line": 439,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161957123",
        "prototype_hash": "4146034803",
        "flaw_hash": "48315207",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3158889252",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1425177925",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1130,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/myaccount/formmyaccount.php",
          "line": 55,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4168022894",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1484,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable logQuery. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/include/administration/configchangelog/viewlogs.php",
          "line": 217,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "4025998898",
        "prototype_hash": "4146034803",
        "flaw_hash": "740994835",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2397003160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1449,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreontraps.class.php",
          "line": 137,
          "function_name": "setMatchingOptions",
          "qualified_function_name": "CentreonTraps.setMatchingOptions",
          "function_prototype": "setMatchingOptions($, ...)",
          "scope": "CentreonTraps"
        }
      },
      "flaw_match": {
        "procedure_hash": "3653126893",
        "prototype_hash": "4293408471",
        "flaw_hash": "105987129",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1450,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreontraps.class.php",
          "line": 602,
          "function_name": "setPreexec",
          "qualified_function_name": "CentreonTraps.setPreexec",
          "function_prototype": "setPreexec($)",
          "scope": "CentreonTraps"
        }
      },
      "flaw_match": {
        "procedure_hash": "381742476",
        "prototype_hash": "4240070029",
        "flaw_hash": "105987129",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1437,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonldapadmin.class.php",
          "line": 602,
          "function_name": "setStatus",
          "qualified_function_name": "CentreonLdapAdmin.setStatus",
          "function_prototype": "setStatus($, array $ \u003d null)",
          "scope": "CentreonLdapAdmin"
        }
      },
      "flaw_match": {
        "procedure_hash": "853894050",
        "prototype_hash": "1556684385",
        "flaw_hash": "1421743569",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2244357461",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2204208184",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1448,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable queryLdapHostParameters. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonldap.class.php",
          "line": 166,
          "function_name": "getLdapHostParameters",
          "qualified_function_name": "CentreonLDAP.getLdapHostParameters",
          "function_prototype": "getLdapHostParameters($, $ \u003d \u0027\u0027)",
          "scope": "CentreonLDAP"
        }
      },
      "flaw_match": {
        "procedure_hash": "3859590991",
        "prototype_hash": "863662575",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1494,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data from the incoming HTTP request, data from a backend database, SQL query string-encoded data from the variable queryString. The data from the incoming HTTP request, data from a backend database, SQL query string-encoded data originated from earlier calls to PDOStatement.fetchAll, PDOStatement.fetch, and PDO.quote.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreondb.class.php",
          "line": 309,
          "function_name": "query",
          "qualified_function_name": "CentreonDB.query",
          "function_prototype": "query($, $ \u003d null, $)",
          "scope": "CentreonDB"
        }
      },
      "flaw_match": {
        "procedure_hash": "2197328597",
        "prototype_hash": "4121987459",
        "flaw_hash": "79393993",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1447,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database, SQL query string-encoded data from the variable queryString. The data from a backend database, SQL query string-encoded data originated from earlier calls to PDOStatement.fetch, and PDO.quote.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreondb.class.php",
          "line": 311,
          "function_name": "query",
          "qualified_function_name": "CentreonDB.query",
          "function_prototype": "query($, $ \u003d null, $)",
          "scope": "CentreonDB"
        }
      },
      "flaw_match": {
        "procedure_hash": "2197328597",
        "prototype_hash": "4121987459",
        "flaw_hash": "3013583388",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "738432786",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1446,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreoncustomview.class.php",
          "line": 1088,
          "function_name": "getUsersFromViewId",
          "qualified_function_name": "CentreonCustomView.getUsersFromViewId",
          "function_prototype": "getUsersFromViewId($)",
          "scope": "CentreonCustomView"
        }
      },
      "flaw_match": {
        "procedure_hash": "2379714344",
        "prototype_hash": "3866843674",
        "flaw_hash": "507985455",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1565100084",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "997028404",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1445,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreoncustomview.class.php",
          "line": 1155,
          "function_name": "getUsergroupsFromViewId",
          "qualified_function_name": "CentreonCustomView.getUsergroupsFromViewId",
          "function_prototype": "getUsergroupsFromViewId($)",
          "scope": "CentreonCustomView"
        }
      },
      "flaw_match": {
        "procedure_hash": "1399327800",
        "prototype_hash": "2400341813",
        "flaw_hash": "3557706555",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3835750742",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3811990192",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1444,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/class/centreonconfigcentreonbroker.php",
          "line": 854,
          "function_name": "updateConfig",
          "qualified_function_name": "CentreonConfigCentreonBroker.updateConfig",
          "function_prototype": "updateConfig($, array $)",
          "scope": "CentreonConfigCentreonBroker"
        }
      },
      "flaw_match": {
        "procedure_hash": "990471091",
        "prototype_hash": "427419485",
        "flaw_hash": "105987129",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1073,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data from the incoming HTTP request from the variable webService. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/webservice.class.php",
          "line": 345,
          "function_name": "router",
          "qualified_function_name": "CentreonWebService.router",
          "function_prototype": "router(\\Pimple\\Container______________________________________________________________________________________________________________________________________________________________ $, CentreonUser $, $ \u003d false)",
          "scope": "CentreonWebService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1283094965",
        "prototype_hash": "3841724357",
        "flaw_hash": "2441459579",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "499373397",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "464171429",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1461,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable query. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_performance_service.class.php",
          "line": 199,
          "function_name": "getList",
          "qualified_function_name": "CentreonPerformanceService.getList",
          "function_prototype": "getList()",
          "scope": "CentreonPerformanceService"
        }
      },
      "flaw_match": {
        "procedure_hash": "3610310186",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1459,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_metric.class.php",
          "line": 100,
          "function_name": "getList",
          "qualified_function_name": "CentreonMetric.getList",
          "function_prototype": "getList()",
          "scope": "CentreonMetric"
        }
      },
      "flaw_match": {
        "procedure_hash": "520918490",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1460,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_metric.class.php",
          "line": 164,
          "function_name": "getListByService",
          "qualified_function_name": "CentreonMetric.getListByService",
          "function_prototype": "getListByService()",
          "scope": "CentreonMetric"
        }
      },
      "flaw_match": {
        "procedure_hash": "1367694496",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1458,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable query. The data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_home_customview.class.php",
          "line": 81,
          "function_name": "getListSharedViews",
          "qualified_function_name": "CentreonHomeCustomview.getListSharedViews",
          "function_prototype": "getListSharedViews()",
          "scope": "CentreonHomeCustomview"
        }
      },
      "flaw_match": {
        "procedure_hash": "3056354535",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {}
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1457,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable queryTimePeriod. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_timeperiod.class.php",
          "line": 102,
          "function_name": "getList",
          "qualified_function_name": "CentreonConfigurationTimeperiod.getList",
          "function_prototype": "getList()",
          "scope": "CentreonConfigurationTimeperiod"
        }
      },
      "flaw_match": {
        "procedure_hash": "294475351",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1456,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable queryContact. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_servicegroup.class.php",
          "line": 180,
          "function_name": "getServiceList",
          "qualified_function_name": "CentreonConfigurationServicegroup.getServiceList",
          "function_prototype": "getServiceList()",
          "scope": "CentreonConfigurationServicegroup"
        }
      },
      "flaw_match": {
        "procedure_hash": "1225237770",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1490,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable queryService. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_service.class.php",
          "line": 219,
          "function_name": "getServicesByHost",
          "qualified_function_name": "CentreonConfigurationService.getServicesByHost",
          "function_prototype": "getServicesByHost($, $, array $ \u003d null, $ \u003d false, $ \u003d \u0027\u0027, $ \u003d \u0027all\u0027, $ \u003d \u0027enable\u0027)",
          "scope": "CentreonConfigurationService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1322320977",
        "prototype_hash": "77539338",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1454,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable queryService. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_service.class.php",
          "line": 245,
          "function_name": "getServicesByHost",
          "qualified_function_name": "CentreonConfigurationService.getServicesByHost",
          "function_prototype": "getServicesByHost($, $, array $ \u003d null, $ \u003d false, $ \u003d \u0027\u0027, $ \u003d \u0027all\u0027, $ \u003d \u0027enable\u0027)",
          "scope": "CentreonConfigurationService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1322320977",
        "prototype_hash": "77539338",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1455,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from a backend database from the variable queryService. The data from a backend database originated from earlier calls to PDOStatement.fetch, and PDOStatement.fetchAll.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_service.class.php",
          "line": 336,
          "function_name": "getServicesByHostgroup",
          "qualified_function_name": "CentreonConfigurationService.getServicesByHostgroup",
          "function_prototype": "getServicesByHostgroup($, $, array $ \u003d null)",
          "scope": "CentreonConfigurationService"
        }
      },
      "flaw_match": {
        "procedure_hash": "1696147710",
        "prototype_hash": "2981545508",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1023,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data from the incoming HTTP request from the variable targetedFile. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_objects.class.php",
          "line": 79,
          "function_name": "getDefaultValues",
          "qualified_function_name": "CentreonConfigurationObjects.getDefaultValues",
          "function_prototype": "getDefaultValues()",
          "scope": "CentreonConfigurationObjects"
        }
      },
      "flaw_match": {
        "procedure_hash": "2040983434",
        "prototype_hash": "3850940339",
        "flaw_hash": "3330055596",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3287313729",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1453,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable queryValuesRetrieval. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_objects.class.php",
          "line": 221,
          "function_name": "retrieveSimpleValues",
          "qualified_function_name": "CentreonConfigurationObjects.retrieveSimpleValues",
          "function_prototype": "retrieveSimpleValues(array $, $, $)",
          "scope": "CentreonConfigurationObjects"
        }
      },
      "flaw_match": {
        "procedure_hash": "1489267442",
        "prototype_hash": "785860985",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1452,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable queryHostGroup. The data from the incoming HTTP request, data from a backend database originated from earlier calls to PDOStatement.fetchAll, and PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_hostgroup.class.php",
          "line": 184,
          "function_name": "getHostList",
          "qualified_function_name": "CentreonConfigurationHostgroup.getHostList",
          "function_prototype": "getHostList()",
          "scope": "CentreonConfigurationHostgroup"
        }
      },
      "flaw_match": {
        "procedure_hash": "1978627071",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1451,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request, data from a backend database from the variable query. The data from the incoming HTTP request, data from a backend database originated from an earlier call to PDOStatement.fetch.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/www/api/class/centreon_configuration_host.class.php",
          "line": 144,
          "function_name": "getList",
          "qualified_function_name": "CentreonConfigurationHost.getList",
          "function_prototype": "getList()",
          "scope": "CentreonConfigurationHost"
        }
      },
      "flaw_match": {
        "procedure_hash": "1715925028",
        "prototype_hash": "3850940339",
        "flaw_hash": "2995706863",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.!newinit_0_4",
      "issue_id": 1000,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.PDO.!newinit_0_4() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The first argument to !newinit_0_4() contains data arriving over the network from the variable dsn. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 371,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "321005965",
        "prototype_hash": "4146034803",
        "flaw_hash": "1188433013",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "495397802",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.!newinit_0_4",
      "issue_id": 1001,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "External Control of System or Configuration Setting",
      "cwe_id": "15",
      "display_text": "\u003cspan\u003eThis call to !php_standard_ns.PDO.!newinit_0_4() allows external control of system settings.  The argument to the function is constructed using untrusted input, which can disrupt service or cause an application to behave in unexpected ways. The third argument to !newinit_0_4() contains data arriving over the network from the variable dbPassword. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eNever allow untrusted or otherwise untrusted data to control system-level settings.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/15.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/tools/update_centreon_storage_logs.php",
          "line": 371,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "321005965",
        "prototype_hash": "4146034803",
        "flaw_hash": "1188433013",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "495397802",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.query",
      "issue_id": 1493,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains data arriving over the network from the variable query. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/core/platform/infrastructure/repository/dbwriteupdaterepository.php",
          "line": 315,
          "function_name": "executeQuery",
          "qualified_function_name": "Core.Platform.Infrastructure.Repository.DbWriteUpdateRepository.executeQuery",
          "function_prototype": "executeQuery($)",
          "scope": "Core\\Platform\\Infrastructure\\Repository\\DbWriteUpdateRepository"
        }
      },
      "flaw_match": {
        "procedure_hash": "71750162",
        "prototype_hash": "2524871977",
        "flaw_hash": "85533767",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1441,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable sql. The data from the incoming HTTP request originated from an earlier call to file_get_contents.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreon/domain/repository/topologyrepository.php",
          "line": 59,
          "function_name": "disableMenus",
          "qualified_function_name": "Centreon.Domain.Repository.TopologyRepository.disableMenus",
          "function_prototype": "disableMenus()",
          "scope": "Centreon\\Domain\\Repository\\TopologyRepository"
        }
      },
      "flaw_match": {
        "procedure_hash": "3355368011",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!php_standard_ns.PDO.prepare",
      "issue_id": 1442,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to !php_standard_ns.PDO.prepare() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to prepare() contains data from the incoming HTTP request from the variable sql. The data from the incoming HTTP request originated from an earlier call to file_get_contents.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon/src/centreon/domain/repository/topologyrepository.php",
          "line": 71,
          "function_name": "enableMenus",
          "qualified_function_name": "Centreon.Domain.Repository.TopologyRepository.enableMenus",
          "function_prototype": "enableMenus()",
          "scope": "Centreon\\Domain\\Repository\\TopologyRepository"
        }
      },
      "flaw_match": {
        "procedure_hash": "3219402264",
        "prototype_hash": "3850940339",
        "flaw_hash": "105987129",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1969356147",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "6"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1005,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data from the incoming HTTP request. \u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-open-tickets/www/modules/centreon-open-tickets/webservices/rest/centreon_openticket.class.php",
          "line": 59,
          "function_name": "postTestProvider",
          "qualified_function_name": "CentreonOpenticket.postTestProvider",
          "function_prototype": "postTestProvider()",
          "scope": "CentreonOpenticket"
        }
      },
      "flaw_match": {
        "procedure_hash": "74803348",
        "prototype_hash": "3850940339",
        "flaw_hash": "941484179",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4241878858",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "166626444",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phprequire",
      "issue_id": 1112,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phprequire() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phprequire() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 63,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "642155881",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3066975402",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1217310416",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1012,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 68,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "3544410750",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "163864047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1053833579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1015,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 71,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "3544410750",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "163864047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1053833579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1017,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 74,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "3544410750",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "163864047",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1053833579",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1016,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 78,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 1,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1008,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 82,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 2,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1010,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 86,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 3,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1004,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 90,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 4,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1011,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 94,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 5,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1014,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 98,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 6,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1013,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/slots.php",
          "line": 101,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "2461768076",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 7,
        "flaw_hash_ordinal": 7,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    },
    {
      "title": "!operator_phpinclude",
      "issue_id": 1006,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Control of Filename for Include/Require Statement in PHP Program (\u0027PHP Remote File Inclusion\u0027)",
      "cwe_id": "98",
      "display_text": "\u003cspan\u003eThis call to !operator_phpinclude() contains a PHP file inclusion flaw. The PHP application receives untrusted input but does not properly restrict the input before using it in require(), include(), or similar functions.  This can allow an attacker to specify a URL to a remote location from which the application will retrieve code and execute it. The first argument to !operator_phpinclude() contains data arriving over the network. The data arriving over the network originated from an earlier call to fgets.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  Use allowlists to specify known safe values rather than relying on blocklists to detect malicious input. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/98.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "centreon-dsm/www/modules/centreon-dsm/core/configuration/services/formslot.php",
          "line": 236,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "(void)",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3477535901",
        "prototype_hash": "4146034803",
        "flaw_hash": "646408041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "269967949",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3369604131",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      }
    }
  ],
  "pipeline_scan": "22.12.0-0",
  "dev_stage": "DEVELOPMENT"
}
